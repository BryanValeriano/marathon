IOI 2003 - Trail Maintenance (use efficient incremental MST)
IOI 2008 - Type Printer (DFS traversal of Suffix Trie)
IOI 2009 - Garage (simulation)
IOI 2009 - POI (sort)
IOI 2010 - Cluedo (use 3 pointers)
IOI 2010 - Memory (use 2 linear pass)
IOI 2010 - Quality of Living (binary search the answer)
IOI 2011 - Alphabets (practice task; use the more space-efficient base 26)
IOI 2011 - Crocodile (can be modeled as an SSSP problem)
IOI 2011 - Elephants (optimized greedy solution can be used up to subtask 3, but the harder subtasks 4 and 5 must be solved using efficient data structure)
IOI 2011 - Pigeons (this problem becomes simpler with bit manipulation but the final solution requires much more than that.)
IOI 2011 - Race (D&C; whether the solution path uses a vertex or not)
IOI 2011 - Tropical Garden (graph traversal; DFS; involving cycle)
SPOJ 0101 - Fishmonger (discussed in this section)
SPOJ 0739 - The Moronic Cowmpouter (find the representation in base -2)
SPOJ 3944 - Bee Walk (a grid problem)
SPOJ 6409 - Suffix Array (problem author: Felix Halim)
Thailand ICPC National Contest 2009 - My Ancestor (author: Felix Halim)
Top Coder Open 2009: Prime Pairs (discussed in this section)
UVa 00100 - The 3n + 1 problem (do as asked; note that j can be < i)
UVa 00101 - The Blocks Problem (‘stack’ like simulation; but we need to access the content of each stack too, so it is better to use 2D array)
UVa 00102 - Ecological Bin Packing (just try all 6 possible combinations)
UVa 00103 - Stacking Boxes (longest paths on DAG; backtracking OK)
UVa 00104 - Arbitrage * (small arbitrage problem solvable with FW)
UVa 00105 - The Skyline Problem (height map, sweep left-right)
UVa 00106 - Fermat vs. Phytagoras (brute force; use GCD to get relatively prime triples)
UVa 00107 - The Cat in the Hat (use logarithm, power)
UVa 00108 - Maximum Sum * (discussed in this section with sample source code)
UVa 00110 - Meta-loopless sort (actually an ad hoc sorting problem)
UVa 00111 - History Grading (be careful of the ranking system)
UVa 00112 - Tree Summing (backtracking)
UVa 00113 - Power Of Cryptography (use exp(ln(x) × y))
UVa 00114 - Simulation Wizardry (simulation of pinball machine)
UVa 00115 - Climbing Trees (tree traversal, Lowest Common Ancestor)
UVa 00116 - Unidirectional TSP (similar to UVa 10337)
UVa 00117 - The Postal Worker ... (Euler tour, cost of tour)
UVa 00118 - Mutant Flatworld Explorers (traversal on implicit graph)
UVa 00119 - Greedy Gift Givers (simulate give and receive process)
UVa 00122 - Trees on the level (tree traversal)
UVa 00123 - Searching Quickly (modified comparison function, use sort)
UVa 00124 - Following Orders (use backtracking to generate valid toposorts)
UVa 00125 - Numbering Paths (modified Floyd Warshall’s)
UVa 00126 - The Errant Physicist (polynomial multiplication and tedious output formatting)
UVa 00127 - “Accordian” Patience (shuffling stack)
UVa 00128 - Software CRC ((a × b)mods = ((amods) ∗ (bmods))mods)
UVa 00129 - Krypton Factor (backtracking, string processing check, a bit of output formatting)
UVa 00136 - Ugly Numbers (use similar technique as UVa 443)
UVa 00138 - Street Numbers (arithmetic progression formula, precalculated)
UVa 00139 - Telephone Tangles (calculate phone bill; string manipulation)
UVa 00140 - Bandwidth (max n is just 8, use next permutation; the algorithm inside next permutation is iterative)
UVa 00141 - The Spot Game (simulation, pattern check)
UVa 00144 - Student Grants (simulation)
UVa 00145 - Gondwanaland Telecom (similar nature with UVa 139)
UVa 00146 - ID Codes * (use next permutation)
UVa 00147 - Dollars (similar to UVa 357 and UVa 674)
UVa 00148 - Anagram Checker (uses backtracking)
UVa 00153 - Permalex (find formula for this, similar to UVa 941)
UVa 00154 - Recycling (3 nested loops)
UVa 00156 - Ananagram * (easier with algorithm::sort)
UVa 00159 - Word Crosses (tedious output formatting problem)
UVa 00160 - Factors and Factorials (precalc small primes as prime factors of 100! is < 100)
UVa 00161 - Traffic Lights * (this is a typical situation on the road)
UVa 00162 - Beggar My Neighbour (card game simulation; straightforward)
UVa 00164 - String Computer (String Alignment/Edit Distance)
UVa 00165 - Stamps (requires some DP too; can be pre-calculated)
UVa 00166 - Making Change (two coin change variants in one problem)
UVa 00167 - The Sultan Successor (8-queens chess problem)
UVa 00168 - Theseus and the ... (Adjacency Matrix, parsing, traversal)
UVa 00170 - Clock Patience (simulation, time)
UVa 00183 - Bit Maps * (simple exercise of Divide and Conquer)
UVa 00186 - Trip Routing (graph is small, print path)
UVa 00187 - Transaction Processing (an accounting problem)
UVa 00188 - Perfect Hash (3 nested loops, until the answer is found)
UVa 00193 - Graph Coloring * (Max Independent Set, input is small)
UVa 00195 - Anagram * (easier with algorithm::next permutation)
UVa 00196 - Spreadsheet (notice that the dependencies of cells are acyclic; we can therefore memoize the direct (or indirect) value of each cell)
UVa 00200 - Rare Order (toposort)
UVa 00202 - Repeating Decimals (do expansion digit by digit until it cycles)
UVa 00208 - Firetruck (backtracking with some pruning)
UVa 00213 - Message Decoding (decrypt the message)
UVa 00214 - Code Generation (just simulate the process; be careful with subtract (-), divide (/), and negate (@), tedious)
UVa 00216 - Getting in Line * (TSP, still solvable with backtracking)
UVa 00220 - Othello (follow the game rules, a bit tedious)
UVa 00222 - Budget Travel (looks like a DP problem, but the state cannot be memoized as ‘tank’ is floating-point; fortunately, the input is not large)
UVa 00227 - Puzzle (parse the input, array manipulation)
UVa 00230 - Borrowers (a bit of string parsing, see Section 6.2; maintain list of sorted books; sort key: author names first and if ties, by title; the input size is small although not stated; we do not need to use balanced BST)
UVa 00231 - Testing the Catcher (straight-forward)
UVa 00232 - Crossword Answers (complex array manipulation problem)
UVa 00234 - Switching Channels (use next permutation, simulation)
UVa 00245 - Uncompress (use the given algorithm)
UVa 00247 - Calling Circles * (SCC + printing solution)
UVa 00253 - Cube painting (try all, similar problem in UVa 11959)
UVa 00255 - Correct Move (check the validity of chess moves)
UVa 00256 - Quirksome Squares (brute force, math, pre-calculate-able)
UVa 00257 - Palinwords (standard DP palindrome plus brute force checks)
UVa 00259 - Software Allocation * (discussed in this section)
UVa 00260 - Il Gioco dell’X (6 neighbors per cell!)
UVa 00263 - Number Chains (sort digits, convert to integers, check cycle)
UVa 00264 - Count on Cantor * (math, grid, pattern)
UVa 00271 - Simply Syntax (grammar check, linear scan)
UVa 00272 - TEX Quotes (replace all double quotes to TEX() style quotes)
UVa 00274 - Cat and Mouse (variant of transitive closure problem)
UVa 00275 - Expanding Fractions (same as UVa 202 except the output format)
UVa 00276 - Egyptian Multiplication (multiplication of Egyptian hieroglyphs)
UVa 00278 - Chess * (ad hoc, chess, closed form formula exists)
UVa 00280 - Vertex (graph, reachability test by traversing the graph)
UVa 00291 - The House of Santa ... (Euler tour, small graph, backtracking)
UVa 00294 - Divisors * (numDiv(N))
UVa 00296 - Safebreaker (try all 10000 possible codes, 4 nested loops, use similar solution as ‘Master-Mind’ game)
UVa 00297 - Quadtrees (simple quadtree problem)
UVa 00300 - Maya Calendar (ad hoc, time)
UVa 00301 - Transportation (2 22 with pruning is possible)
UVa 00306 - Cipher (can be made faster by avoiding cycle)
UVa 00311 - Packets
UVa 00314 - Robot * (state: (position, direction), transform input graph)
UVa 00315 - Network * (finding articulation points)
UVa 00318 - Domino Effect (traversal, be careful of corner cases)
UVa 00320 - Border (requires flood fill technique)
UVa 00324 - Factorial Frequencies * (count digits of n! up to 366!)
UVa 00325 - Identifying Legal ... * (see the Java solution above)
UVa 00326 - Extrapolation using a ... (difference table)
UVa 00327 - Evaluating Simple C ... (implementation can be tricky)
UVa 00330 - Inventory Maintenance (use map to help)
UVa 00331 - Mapping the Swaps (n ≤ 5...)
UVa 00332 - Rational Numbers from ... (use GCD to simplify fraction)
UVa 00333 - Recognizing Good ISBNs (note: this problem has ‘buggy’ test data with blank lines that potentially cause lots of ‘Presentation Errors’)
UVa 00334 - Identifying Concurrent ... * (transitive closure++)
UVa 00335 - Processing MX Records (simulation)
UVa 00336 - A Node Too Far (discussed in this section)
UVa 00337 - Interpreting Control ... (simulation, output related)
UVa 00338 - Long Multiplication (tedious)
UVa 00339 - SameGame Simulation (follow problem description)
UVa 00340 - Master-Mind Hints (determine strong and weak matches)
UVa 00341 - Non-Stop Travel (graph is small)
UVa 00346 - Getting Chorded (musical chord, major/minor)
UVa 00347 - Run, Run, Runaround ... (simulate the process)
UVa 00349 - Transferable Voting (II) (simulation)
UVa 00350 - Pseudo-Random Numbers * (discussed in this section)
UVa 00352 - The Seasonal War (count # of connected components (CC))
UVa 00353 - Pesky Palindromes (brute force all substring)
UVa 00357 - Let Me Count The Ways * (similar to UVa 147/674)
UVa 00362 - 18,000 Seconds Remaining (typical file download situation)
UVa 00369 - Combinations (be careful with overflow issue)
UVa 00371 - Ackermann Functions (similar to UVa 100)
UVa 00373 - Romulan Spelling (check ‘g’ versus ‘p’, ad hoc)
UVa 00374 - Big Mod * (solvable with Java BigInteger modPow; or write your own code, see Section 9.21)
UVa 00377 - Cowculations * (base 4 operations)
UVa 00379 - HI-Q (follow problem description)
UVa 00380 - Call Forwarding (simple backtracking, but we have to work with strings, see Section 6.2)
UVa 00381 - Making the Grade (simulation)
UVa 00382 - Perfection * (do trial division)
UVa 00383 - Shipping Routes (simple SSSP solvable with BFS, use mapper)
UVa 00384 - Slurpys (recursive grammar check)
UVa 00386 - Perfect Cubes (4 nested loops with pruning)
UVa 00388 - Galactic Import (key idea: we want to minimize planet movements because every edge used decreases value by 5%)
UVa 00391 - Mark-up (use flags, tedious parsing)
UVa 00392 - Polynomial Showdown (follow the orders: output formatting)
UVa 00394 - Mapmaker (any n-dimensional array is stored in computer memory as a single dimensional array; follow the problem description)
UVa 00397 - Equation Elation (iteratively perform the next operation)
UVa 00400 - Unix ls (this command very frequently used in UNIX)
UVa 00401 - Palindromes * (simple palindrome check)
UVa 00403 - Postscript * (emulation of printer driver, tedious)
UVa 00405 - Message Routing (simulation)
UVa 00406 - Prime Cuts (sieve; take the middle ones)
UVa 00408 - Uniform Generator (cycle finding problem with easier solution: it is a good choice if step < mod and GCD(step, mod) == 1)
UVa 00409 - Excuses, Excuses (tokenize and compare with list of excuses)
UVa 00410 - Station Balance (discussed in this section, load balancing)
UVa 00412 - Pi (brute force; GCD to find elements with no common factor)
UVa 00413 - Up and Down Sequences (simulate; array manipulation)
UVa 00414 - Machined Surfaces (get longest stretch of ‘B’s)
UVa 00416 - LED Test * (backtrack, try all)
UVa 00417 - Word Index (generate all words, add to map for auto sorting)
UVa 00422 - Word Search Wonder * (2D grid, backtracking)
UVa 00423 - MPI Maelstrom (graph is small)
UVa 00426 - Fifth Bank of ... (tokenize; sort; reformat output)
UVa 00429 - Word Transformation * (each word is a vertex, connect 2 words with an edge if differ by 1 letter)
UVa 00433 - Bank (Not Quite O.C.R.) (similar to UVa 416)
UVa 00434 - Matty’s Blocks (a kind of visibility problem in geometry, solvable with using 2D array manipulation)
UVa 00435 - Block Voting (only 2 20 possible coalition combinations)
UVa 00436 - Arbitrage (II) (another arbitrage problem)
UVa 00437 - The Tower of Babylon (can be modeled as LIS)
UVa 00441 - Lotto * (6 nested loops)
UVa 00442 - Matrix Chain Multiplication (properties of matrix chain mult)
UVa 00443 - Humble Numbers * (try all 2 i × 3 j × 5 k × 7 l , sort)
UVa 00444 - Encoder and Decoder (each char is mapped to 2 or 3 digits)
UVa 00445 - Marvelous Mazes (simulation, output formatting)
UVa 00447 - Population Explosion (life simulation model)
UVa 00448 - OOPS (tedious ‘hexadecimal’ to ‘assembly language’ conversion)
UVa 00449 - Majoring in Scales (easier if you have a musical background)
UVa 00450 - Little Black Book (tedious sorting problem)
UVa 00452 - Project Scheduling * (PERT; longest paths on DAG; DP)
UVa 00454 - Anagrams * (anagram)
UVa 00455 - Periodic String (find s in s + s)
UVa 00457 - Linear Cellular Automata (simplified ‘game of life’ simulation; similar idea with UVa 447; explore the Internet for that term)
UVa 00458 - The Decoder (shift each character’s ASCII value by -7)
UVa 00459 - Graph Connectivity (also solvable with ‘union find’)
UVa 00462 - Bridge Hand Evaluator * (simulation; card)
UVa 00464 - Sentence/Phrase Generator (generate output based on the given BNF grammar)
UVa 00466 - Mirror Mirror (core functions: rotate and reflect)
UVa 00467 - Synching Signals (linear scan, 1D boolean flag)
UVa 00468 - Key to Success (letter frequency mapping)
UVa 00469 - Wetlands of Florida (count size of a CC; discussed in this section)
UVa 00471 - Magic Numbers (somewhat similar to UVa 725)
UVa 00474 - Heads Tails Probability (this is just a log & pow exercise)
UVa 00481 - What Goes Up? * (use O(n log k) LIS; print solution; see our sample source code)
UVa 00482 - Permutation Arrays (you may need to use a string tokenizer—see Section 6.2—as the size of the array is not specified)
UVa 00483 - Word Scramble (read char by char from left to right)
UVa 00484 - The Department of ... (maintain frequency with map)
UVa 00485 - Pascal Triangle of Death (binomial coefficients + BigInteger)
UVa 00486 - English-Number Translator (parsing)
UVa 00487 - Boggle Blitz (use map to store the generated words)
UVa 00488 - Triangle Wave * (use several loops)
UVa 00489 - Hangman Judge * (just do as asked)
UVa 00490 - Rotating Sentences (2d array manipulation, output formatting)
UVa 00492 - Pig Latin (ad hoc, similar to UVa 483)
UVa 00493 - Rational Spiral (simulate the spiral process)
UVa 00494 - Kindergarten Counting ... * (see the Java solution above)
UVa 00495 - Fibonacci Freeze (very easy with Java BigInteger)
UVa 00496 - Simply Subsets (set manipulation)
UVa 00497 - Strategic Defense Initiative (solution must be printed)
UVa 00498 - Polly the Polynomial * (polynomial evaluation)
UVa 00499 - What’s The Frequency ... (use 1D array for frequency counting) 2. UVa 00895 - Word Problem (get the letter frequency of each word, compare with puzzle line)
UVa 00501 - Black Box (use multiset with efficient iterator manipulation)
UVa 00507 - Jill Rides Again (standard problem)
UVa 00514 - Rails * (use stack to simulate the process)
UVa 00516 - Prime Land * (problem involving prime-power factorization)
UVa 00524 - Prime Ring Problem * (also see Section 5.5.1)
UVa 00526 - Edit Distance * (String Alignment/Edit Distance)
UVa 00530 - Binomial Showdown (work with doubles; optimize computation)
UVa 00531 - Compromise (Longest Common Subsequence; print the solution)
UVa 00532 - Dungeon Master (3-D BFS)
UVa 00534 - Frogger (minimax, also solvable with Floyd Warshall’s)
UVa 00536 - Tree Recovery (reconstructing tree from pre + inorder)
UVa 00537 - Artificial Intelligence? (simple formula; parsing is difficult)
UVa 00538 - Balancing Bank Accounts (the problem’s premise is quite true)
UVa 00539 - The Settlers ... (longest simple path in a small general graph)
UVa 00540 - Team Queue (modified ‘queue’)
UVa 00541 - Error Correction (count the number of ‘1’s for each row/col; all of them must be even; if ∃ an error, check if it is on the same row and col)
UVa 00542 - France ’98 (divide and conquer)
UVa 00543 - Goldbach’s Conjecture * (sieve; complete search; Christian Goldbach’s conjecture (updated by Leonhard Euler): Every even number ≥ 4 can be expressed as the sum of two prime numbers)
UVa 00544 - Heavy Cargo (maximin, also solvable with Floyd Warshall’s)
UVa 00545 - Heads (use logarithm, power, similar to UVa 474)
UVa 00547 - DDF (a problem about ‘eventually constant’ sequence)
UVa 00548 - Tree (reconstructing tree from in + postorder traversal)
UVa 00550 - Multiplying by Rotation (rotamult property; try one by one starting from 1 digit)
UVa 00554 - Caesar Cypher * (try all shifts; output formatting)
UVa 00555 - Bridge Hands (card game)
UVa 00556 - Amazing * (simulation)
UVa 00558 - Wormholes * (checking the existence of negative cycle)
UVa 00562 - Dividing Coins (use a one dimensional table)
UVa 00565 - Pizza Anyone? (backtracking with lots of pruning)
UVa 00567 - Risk (simple SSSP solvable with BFS, but graph is small, so can be solved easier with Floyd Warshall’s)
UVa 00568 - Just the Facts (can use Java BigInteger, slow but AC)
UVa 00570 - Stats (use map to help)
UVa 00571 - Jugs (solution can be suboptimal, add flag to avoid cycling)
UVa 00572 - Oil Deposits (count number of CCs, similar to UVa 352)
UVa 00573 - The Snail * (simulation, beware of boundary cases!)
UVa 00574 - Sum It Up * (print all solutions with backtracking)
UVa 00575 - Skew Binary * (base modification)
UVa 00576 - Haiku Review (parsing, grammar)
UVa 00579 - Clock Hands * (ad hoc, time)
UVa 00580 - Critical Mass (related to Tribonacci series; Tribonacci numbers are the generalization of Fibonacci numbers; it is defined by T 1 = 1, T 2 = 1, T 3 = 2, and T n = T n−1 + T n−2 + T n−3 for n ≥ 4)
UVa 00583 - Prime Factors * (basic prime factorization problem)
UVa 00584 - Bowling * (simulation, games, reading comprehension)
UVa 00590 - Always on the Run (s: pos, day left)
UVa 00591 - Box of Bricks (sum all items; get the average; sum the total absolute differences of each item from the average divided by two)
UVa 00594 - One Little, Two Little ... (manipulate bit string with bitset)
UVa 00598 - Bundling Newspaper (print all solutions with backtracking)
UVa 00599 - The Forrest for the Trees * (v−e = number of connected components, keep a bitset of size 26 to count the number of vertices that have some edge. Note: Also solvable with Union-Find)
UVa 00603 - Parking Lot (simulate the required process)
UVa 00604 - The Boggle Game (2D matrix, backtracking, sort, and compare)
UVa 00608 - Counterfeit Dollar * (classical problem)
UVa 00610 - Street Directions (finding bridges)
UVa 00613 - Numbers That Count (analyze the number; determine the type; similar spirit with the cycle finding problem in Section 5.7)
UVa 00614 - Mapping the Route (traversal on implicit graph)
UVa 00615 - Is It A Tree? (graph property check)
UVa 00616 - Coconuts, Revisited * (brute force up to sqrt(n), get pattern)
UVa 00617 - Nonstop Travel (try all integer speeds from 30 to 60 mph)
UVa 00620 - Cellular Structure (recursive grammar check)
UVa 00621 - Secret Research (case analysis for only 4 possible outputs)
UVa 00622 - Grammar Evaluation * (recursive BNF grammar check/evaluation)
UVa 00623 - 500 (factorial) * (easy with Java BigInteger)
UVa 00624 - CD * (input size is small, backtracking is enough)
UVa 00626 - Ecosystem (3 nested loops)
UVa 00627 - The Net (also print the path, see discussion in this section)
UVa 00628 - Passwords (backtracking, follow the rules in description)
UVa 00630 - Anagrams (II) (ad hoc, string)
UVa 00632 - Compression (II) (simulate the process, use sorting)
UVa 00636 - Squares (base number conversion up to base 99; Java BigInteger cannot be used as it is MAX RADIX is limited to 36)
UVa 00637 - Booklet Printing * (application in printer driver software)
UVa 00639 - Don’t Get Rooked (generate 2 16 combinations and prune)
UVa 00640 - Self Numbers (DP bottom up, generate the numbers, flag once)
UVa 00641 - Do the Untwist (reverse the given formula and simulate)
UVa 00642 - Word Amalgamation (go through the given small dictionary for the list of possible anagrams)
UVa 00644 - Immediate Decodability * (use brute force)
UVa 00645 - File Mapping (use recursion to simulate directory structure, it helps the output formatting)
UVa 00647 - Chutes and Ladders (childhood board game, also see UVa 11459)
UVa 00651 - Deck (use the given sample I/O to derive the simple formula)
UVa 00657 - The Die is Cast (there are three ‘colors’ here)
UVa 00661 - Blowing Fuses (simulation)
UVa 00663 - Sorting Slides (try disallowing an edge to see if MCBM changes; which implies that the edge has to be used)
UVa 00665 - False Coin (use 1D boolean flags; all coins are initially potential false coins; if ‘=’, all coins on the left and right are not false coins; if ‘<’ or‘>’, all coins not on the left and right are not false coins; check if there is only one candidate false coin left at the end)
UVa 00668 - Parliament
UVa 00670 - The Dog Task (MCBM)
UVa 00671 - Spell Checker (string comparison)
UVa 00674 - Coin Change (discussed in this section with sample source code)
UVa 00677 - All Walks of length “n” ... (print all solutions with backtracking)
UVa 00679 - Dropping Balls (binary search; bit manipulation solutions exist)
UVa 00686 - Goldbach’s Conjecture (II) (similar to UVa 543)
UVa 00694 - The Collatz Sequence (similar to UVa 100)
UVa 00696 - How Many Knights * (ad hoc, chess)
UVa 00697 - Jack and Jill (requires some output formatting and basic knowledge about Physics)
UVa 00699 - The Falling Leaves (preorder traversal)
UVa 00700 - Date Bugs (can be solved with bitset)
UVa 00701 - Archaelogist’s Dilemma * (use log to count # of digits)
UVa 00703 - Triple Ties: The ... (3 nested loops)
UVa 00706 - LC-Display (what we see in old digital display)
UVa 00712 - S-Trees (simple binary tree traversal variant)
UVa 00719 - Glass Beads (min lexicographic rotation 19 ; O(n log n) build SA)
UVa 00722 - Lakes (count the size of CCs)
UVa 00725 - Division (elaborated in this section)
UVa 00726 - Decode (frequency cypher)
UVa 00729 - The Hamming Distance ... (generate all possible bit strings)
UVa 00732 - Anagram by Stack * (use stack to simulate the process)
UVa 00735 - Dart-a-Mania * (3 nested loops, then count)
UVa 00736 - Lost in Space (2D grid, a bit modified)
UVa 00739 - Soundex Indexing (straightforward conversion problem)
UVa 00740 - Baudot Data ... (just simulate the process)
UVa 00741 - Burrows Wheeler Decoder (simulate the process)
UVa 00743 - The MTM Machine (recursive grammar check)
UVa 00750 - 8 Queens Chess Problem (discussed in this section with sample source code)
UVa 00753 - A Plug for Unix (initially a non standard matching problem but this problem can be reduced to a simple MCBM problem)
UVa 00755 - 487-3279 (Direct Addressing Table; convert the letters except Q & Z to 2-9; keep ‘0’-‘9’ as 0-9; sort the integers; find duplicates if any)
UVa 00756 - Biorhythms (Chinese Remainder Theorem)
UVa 00758 - The Same Game (floodfill++)
UVa 00760 - DNA Sequencing * (Longest Common Substring of two strings)
UVa 00762 - We Ship Cheap (simple SSSP solvable with BFS, use mapper)
UVa 00763 - Fibinary Numbers * (Zeckendorf representation, greedy, use Java BigInteger)
UVa 00775 - Hamiltonian Cycle (backtracking suffices because the search space cannot be that big; in a dense graph, it is more likely to have a Hamiltonian cycle, so we can prune early; we do NOT have to find the best one like in TSP problem)
UVa 00776 - Monkeys in a Regular ... (label CCs with indices, format output)
UVa 00782 - Countour Painting (replace ‘ ’ with ‘#’ in the grid)
UVa 00784 - Maze Exploration (very similar with UVa 782)
UVa 00785 - Grid Colouring (also very similar with UVa 782)
UVa 00787 - Maximum Sub ... * (max 1D range product, be careful with 0, use Java BigInteger, see Section 5.3)
UVa 00790 - Head Judge Headache (similar to UVa 10258)
UVa 00793 - Network Connections * (trivial; application of disjoint sets)
UVa 00795 - Sandorf’s Cipher (prepare an ‘inverse mapper’)
UVa 00796 - Critical Links * (finding bridges)
UVa 00808 - Bee Breeding (math, grid, similar to UVa 10182)
UVa 00820 - Internet Bandwidth * (LA 5220, World Finals Orlando00, basic max flow, discussed in this section)
UVa 00821 - Page Hopping * (LA 5221, World Finals Orlando00, one of the ‘easiest’ ICPC World Finals problem)
UVa 00824 - Coast Tracker (traversal on implicit graph)
UVa 00825 - Walking on the Safe Side (counting paths in implicit DAG; DP)
UVa 00830 - Shark (very hard to get AC, one minor error = WA)
UVa 00834 - Continued Fractions (do as asked)
UVa 00836 - Largest Submatrix (convert ‘0’ to -INF)
UVa 00839 - Not so Mobile (can be viewed as recursive problem on tree)
UVa 00846 - Steps (uses the sum of arithmetic progression formula)
UVa 00847 - A multiplication game (simulate the perfect play, discussed above)
UVa 00850 - Crypt Kicker II (plaintext attack, tricky test cases)
UVa 00852 - Deciding victory in Go (interesting board game ‘Go’)
UVa 00855 - Lunch in Grid City (sort, median)
UVa 00856 - The Vigenère Cipher (3 nested loops; one for each digit)
UVa 00857 - Quantiser (MIDI, application in computer music)
UVa 00859 - Chinese Checkers (BFS)
UVa 00860 - Entropy Text Analyzer (frequency counting)
UVa 00861 - Little Bishops (backtracking with pruning as in 8-queens recursive backtracking solution; then pre-calculate the results)
UVa 00865 - Substitution Cypher (simple character substitution mapping)
UVa 00868 - Numerical maze (try row 1 to N; 4 ways; some constraints)
UVa 00869 - Airline Comparison (run Warshall’s 2x, compare AdjMatrices)
UVa 00871 - Counting Cells in a Blob (find the size of the largest CC)
UVa 00872 - Ordering * (similar to UVa 124, use backtracking)
UVa 00880 - Cantor Fractions (math, grid, similar to UVa 264)
UVa 00884 - Factorial Factors (numPF(N); precalculate)
UVa 00886 - Named Extension Dialing (convert first letter of given name and all the letters of the surname into digits; then do a kind of special string matching where we want the matching to start at the prefix of a string)
UVa 00890 - Maze (II) (simulation, follow the steps, tedious)
UVa 00892 - Finding words (basic string processing problem)
UVa 00893 - Y3K * (use Java GregorianCalendar; similar to UVa 11356)
UVa 00897 - Annagramatic Primes (sieve; just need to check digit rotations)
UVa 00900 - Brick Wall Patterns (combinatorics, the pattern ≈ Fibonacci)
UVa 00902 - Password Search * (read char by char; count word freq)
UVa 00906 - Rational Neighbor (compute c, from d = 1 until ab < d c )
UVa 00907 - Winterim Backpack... * (s: pos, night left)
UVa 00908 - Re-connecting ... (basic MST problem)
UVa 00910 - TV Game (s: pos, move left)
UVa 00911 - Multinomial Coefficients (there is a formula for this, result = n!/(z 1 ! × z 2 ! × z 3 ! × ... × zk!))
UVa 00912 - Live From Mars (simulation, find and replace)
UVa 00913 - Joana and The Odd ... (derive the short formulas)
UVa 00914 - Jumping Champion (sieve; be careful with L and U < 2)
UVa 00924 - Spreading the News * (the spread is like BFS traversal)
UVa 00925 - No more prerequisites ... (transitive closure++)
UVa 00926 - Walking Around Wisely (similar to UVa 825)
UVa 00927 - Integer Sequence from ... * (use sum of arithmetic series)
UVa 00929 - Number Maze * (on a 2D maze/implicit graph)
UVa 00939 - Genes (map child name to his/her gene and parents’ names)
UVa 00941 - Permutations * (formula to get the n-th permutation)
UVa 00944 - Happy Numbers (similar to UVa 10591)
UVa 00945 - Loading a Cargo Ship (simulate the given cargo loading process)
UVa 00947 - Master Mind Helper (similar to UVa 340)
UVa 00948 - Fibonaccimal Base (Zeckendorf representation, greedy)
UVa 00949 - Getaway (interesting graph data structure twist)
UVa 00957 - Popes (complete search + binary search: upper bound)
UVa 00962 - Taxicab Numbers (pre-calculate the answer)
UVa 00974 - Kaprekar Numbers (there are not that many Kaprekar numbers)
UVa 00978 - Lemmings Battle * (simulation, use multiset)
UVa 00983 - Localized Summing for ... (max 2D range sum, get submatrix)
UVa 00986 - How Many? (counting paths in DAG; DP; s: x, y, lastmove, peaksfound; t: try NE/SE)
UVa 00988 - Many paths, one ... * (counting paths in DAG; DP)
UVa 00990 - Diving For Gold (print the solution)
UVa 00991 - Safe Salutations * (Catalan Numbers)
UVa 00993 - Product of digits (find divisors from 9 down to 1)
UVa 01047 - Zones * (LA 3278, WorldFinals Shanghai05, notice that n ≤ 20 so that we can try all possible subsets of towers to be taken; then apply inclusion-exclusion principle to avoid overcounting)
UVa 01056 - Degrees of Separation * (LA 3569, World Finals SanAntonio06, diameter of a small graph)
UVa 01061 - Consanguine Calculations * (LA 3736 - WorldFinals Tokyo07, consanguine = blood; this problem asks possible combinations of blood types and Rh factor; solvable by trying all eight possible blood + Rh types with the information given in the problem description)
UVa 01062 - Containers * (LA 3752, WorldFinals Tokyo07, simulation with stack; maximum answer is 26 stacks; O(n) solution exists)
UVa 01064 - Network (LA 3808, WorldFinals Tokyo07, permutation of up to 5 messages, simulation, mind the word ‘consecutive’)
UVa 01103 - Ancient Messages * (LA 5130, World Finals Orlando11; major hint: each hieroglyph has unique number of white connected component; then it is an implementation exercise to parse the input and run flood fill to determine the number of white CC inside each black hieroglyph)
UVa 01112 - Mice and Maze * (LA 2425, SouthwesternEurope01, run Dijkstra’s from destination)
UVa 01124 - Celebrity Jeopardy (LA 2681, just echo/re-print the input again)
UVa 01148 - The mysterious X network (LA 3502, SouthWesternEurope05, single source, single target, shortest path problem but exclude endpoints)
UVa 01160 - X-Plosives (count the number of edges not taken by Kruskal’s)
UVa 01174 - IP-TV (LA 3988, SouthWesternEurope07, MST, classic, just need a mapper to map city names to indices)
UVa 01185 - BigNumber (number of digits of factorial, use logarithm to solve it; log(n!) = log(n × (n − 1) . . . × 1) = log(n) + log(n − 1) + . . . + log(1))
UVa 01193 - Radar Installation (LA 2519, Beijing02, interval covering)
UVa 01194 - Machine Schedule (LA 2523, Beijing02, Min Vertex Cover/MVC)
UVa 01196 - Tiling Up Blocks (LA 2815, Kaohsiung03; sort all the blocks in increasing L[i], then we get the classical LIS problem)
UVa 01197 - The Suspects (LA 2817, Kaohsiung03, Connected Components)
UVa 01198 - Geodetic Set Problem (LA 2818, Kaohsiung03, trans closure++)
UVa 01200 - A DP Problem (LA 2972, Tehran03, tokenize linear equation)
UVa 01202 - Finding Nemo (LA 3133, Beijing04, SSSP, Dijkstra’s on grid: treat each cell as a vertex; the idea is simple but one should be careful with the implementation)
UVa 01203 - Argus * (LA 3135, Beijing04; use priority queue)
UVa 01207 - AGTC (LA 3170, Manila06, classical String Edit problem)
UVa 01208 - Oreon (LA 3171, Manila06, MST)
UVa 01209 - Wordfish (LA 3173, Manila06) (STL next and prev permutation)
UVa 01213 - Sum of Different Primes (LA 3619, Yokohama06, extension of 0-1 Knapsack, use three parameters: (id, remN, remK) on top of (id, remN))
UVa 01215 - String Cutting (LA 3669, Hanoi06)
UVa 01216 - The Bug Sensor Problem (LA 3678, Kaohsiung06, minimum ‘spanning forest’)
UVa 01219 - Team Arrangement (LA 3791, Tehran06)
UVa 01223 - Editor (LA 3901, Seoul07, Longest Repeated Substring (or KMP))
UVa 01224 - Tile Code (derive formula from small instances)
UVa 01225 - Digit Counting * (LA 3996, Danang07, N is small)
UVa 01229 - Sub-dictionary (LA 4099, Iran07, identify the SCC of the graph; these vertices and the vertices that have path towards them (e.g. needed to understand these words too) are the answers of the question)
UVa 01232 - SKYLINE (LA 4108, Singapore07, a simple problem if input size is small; but since n ≤ 100000, we have to use a Segment Tree; note that this problem is not about RSQ/RMQ)
UVa 01233 - USHER (LA 4109, Singapore07, Floyd Warshall’s can be used to find the minimum cost cycle in the graph; the maximum input graph size is p ≤ 500 but still doable in UVa online judge)
UVa 01234 - RACING (LA 4110, Singapore07, ‘maximum’ spanning tree)
UVa 01235 - Anti Brute Force Lock (LA 4138, Jakarta08, the underlying problem is MST)
UVa 01237 - Expert Enough * (LA 4142, Jakarta08, input is small)
UVa 01239 - Greatest K-Palindrome ... (LA 4144, Jakarta08, brute-force)
UVa 01241 - Jollybee Tournament (LA 4147, Jakarta08, easy)
UVa 01246 - Find Terrorists (LA 4340, Amrita08, numDiv(N))
UVa 01247 - Interstar Transport (LA 4524, Hsinchu09, APSP, Floyd Warshall’s, modified a bit to prefer shortest path with less intermediate vertices)
UVa 01254 - Top 10 (LA 4657, Jakarta09, Suffix Array + Segment Tree)
UVa 01258 - Nowhere Money (LA 4721, Phuket09, Fibonacci variant, Zeckendorf representation, greedy)
UVa 01260 - Sales * (LA 4843, Daejeon10, check all)
UVa 01261 - String Popping (LA 4844, Daejeon10, a simple backtracking problem; but we use a set<string> to prevent the same state (a substring) from being checked twice)
UVa 01262 - Password * (LA 4845, Daejeon10, sort the columns in the two 6×5 grids first so that we can process common passwords in lexicographic order; backtracking; important: skip two similar passwords)
UVa 10000 - Longest Paths (longest paths on DAG; backtracking OK)
UVa 10001 - Garden of Eden (the upperbound of 2 32 is scary but with efficient pruning, we can pass the time limit as the test case is not extreme)
UVa 10003 - Cutting Sticks (discussed in details in this section with sample	 source code)
UVa 10004 - Bicoloring * (bipartite graph check)
UVa 10006 - Carmichael Numbers (non prime which has ≥ 3 prime factors)
UVa 10007 - Count the Trees * (answer is Cat(n) × n!; BigInteger)
UVa 10008 - What’s Cryptanalysis? (character frequency count)
UVa 10009 - All Roads Lead Where? (simple SSSP solvable with BFS)
UVa 10010 - Where’s Waldorf ? * (discussed in this section)
UVa 10014 - Simple calculations (derive the required formula)
UVa 10016 - Flip-flop the Squarelotron (tedious)
UVa 10018 - Reverse and Add (ad hoc, math, palindrome check)
UVa 10019 - Funny Encryption Method (not hard, find the pattern)
UVa 10020 - Minimal Coverage (interval covering)
UVa 10025 - The ? 1 ? 2 ? ... (simplify the formula first, iterative)
UVa 10026 - Shoemaker’s Problem
UVa 10033 - Interpreter (adhoc, simulation)
UVa 10034 - Freckles (straightforward MST problem)
UVa 10035 - Primary Arithmetic (count the number of carry operations)
UVa 10036 - Divisibility (must use offset technique as value can be negative)
UVa 10037 - Bridge
UVa 10038 - Jolly Jumpers * (use 1D boolean flags to check [1..n − 1])
UVa 10041 - Vito’s Family (try all possible location of Vito’s House)
UVa 10042 - Smith Numbers * (prime factorization, sum the digits)
UVa 10044 - Erdos numbers (the input parsing part is troublesome; if you encounter difficulties with this, see Section 6.2)
UVa 10048 - Audiophobia * (minimax, see the discussion above)
UVa 10049 - Self-describing Sequence (enough to get past > 2G by storing only the first 700K numbers of the Self-describing sequence)
UVa 10050 - Hartals (1D boolean flag)
UVa 10051 - Tower of Cubes (longest paths on DAG; DP)
UVa 10054 - The Necklace * (printing the Euler tour)
UVa 10056 - What is the Probability? (get the closed form formula)
UVa 10057 - A mid-summer night ... (involves the median, use STL sort, upper bound, lower bound and some checks)
UVa 10058 - Jimmi’s Riddles * (solvable with Java regular expression)
UVa 10061 - How many zeros & how ... (in Decimal, ‘10’ with 1 zero is due to factor 2 × 5)
UVa 10062 - Tell me the frequencies (ASCII character frequency count)
UVa 10063 - Knuth’s Permutation (do as asked)
UVa 10065 - Useless Tile Packers Geometry (Convex Hull + Area of Polygon)  Section    7.3.7
UVa 10066 - The Twin Towers (Longest Common Subsequence problem, but not on ‘string’)
UVa 10067 - Playing with Wheels (implicit graph in problem statement)
UVa 10070 - Leap Year or Not Leap ... (more than ordinary leap years)
UVa 10074 - Take the Land (standard problem)
UVa 10077 - The Stern-Brocot ... (binary search)
UVa 10079 - Pizza Cutting (derive the one liner formula)
UVa 10080 - Gopher II (MCBM)
UVa 10082 - WERTYU (this typographical error happens to us sometimes)
UVa 10086 - Test the Rods (s: idx, rem1, rem2; which site that we are now, up to 30 sites; remaining rods to be tested at NCPC; and remaining rods to be tested at BCEW; t: for each site, we split the rods, x rods to be tested at NCPC and m[i] − x rods to be tested at BCEW; print the solution)
UVa 10090 - Marbles * (use solution for Linear Diophantine Equation)
UVa 10092 - The Problem with the ... (assignment problem, matching with capacity, similar with UVa 259)
UVa 10093 - An Easy Problem (try all)
UVa 10094 - Place the Guards (this problem is like the n-queens chess problem, but must find/use the pattern!)
UVa 10098 - Generating Fast, Sorted ... (very similar to UVa 195)
UVa 10099 - Tourist Guide (maximin, also solvable with Floyd Warshall’s)
UVa 10100 - Longest Match (Longest Common Subsequence)
UVa 10101 - Bangla Numbers (follow the problem description carefully)
UVa 10102 - The Path in the ... * (4 nested loops will do, we do not need BFS; get max of minimum Manhattan distance from a ‘1’ to a ‘3’.)
UVa 10104 - Euclid Problem * (pure problem of Extended Euclid)
UVa 10105 - Polynomial Coefficients (n!/(n 1 ! × n 2 ! × ... × n k !); however, the derivation is complex)
UVa 10107 - What is the Median? * (find median of a growing/dynamic list of integers; still solvable with multiple calls of nth element in algorithm)
UVa 10110 - Light, more light * (check if n is a square number)
UVa 10111 - Find the Winning ... * (Tic-Tac-Toe, minimax, backtracking)
UVa 10113 - Exchange Rates (just graph traversal, but uses fraction and gcd, see the relevant sections in Chapter 5)
UVa 10114 - Loansome Car Buyer * (just simulate the process)
UVa 10115 - Automatic Editing (simply do what they want, uses string)
UVa 10116 - Robot Motion (traversal on implicit graph)
UVa 10125 - Sumsets (sort; 4 nested loops; plus binary search)
UVa 10126 - Zipf’s Law (sort the words to simplify this problem)
UVa 10127 - Ones (no factor of 2 and 5 implies that there is no trailing zero)
UVa 10128 - Queue (backtracking with pruning; try up to all N! (13!) permutations that satisfy the requirement; then pre-calculate the results)
UVa 10129 - Play on Words (Euler Graph property check)
UVa 10130 - SuperSale (discussed in this section with sample source code)
UVa 10131 - Is Bigger Smarter? (sort elephants based on decreasing IQ; LIS on increasing weight)
UVa 10132 - File Fragmentation (N = number of fragments, B = total bits of all fragments divided by N/2; try all 2 × N 2 concatenations of two fragments that have length B; report the one with highest frequency; use map)
UVa 10134 - AutoFish (must be very careful with details)
UVa 10137 - The Trip * (be careful with precision error)
UVa 10138 - CDVII (map plates to bills, entrace time and position)
UVa 10139 - Factovisors * (discussed in this section)
UVa 10140 - Prime Distance * (sieve; linear scan)
UVa 10141 - Request for Proposal * (solvable with one linear scan)
UVa 10142 - Australian Voting (simulation)
UVa 10147 - Highways (‘minimum’ spanning subgraph)
UVa 10150 - Doublets (BFS state is string!)
UVa 10152 - ShellSort
UVa 10158 - War (advanced usage of disjoint sets with a nice twist; memorize list of enemies)
UVa 10161 - Ant on a Chessboard * (involves sqrt, ceil...)
UVa 10162 - Last Digit (cycle after 100 steps, use Java BigInteger to read the input, precalculate)
UVa 10165 - Stone Game (Nim game, application of Sprague-Grundy theorem)
UVa 10166 - Travel (this can be modeled as a shortest paths problem)
UVa 10168 - Summation of Four Primes (backtracking with pruning)
UVa 10170 - The Hotel with Infinite ... (one liner formula exists)
UVa 10171 - Meeting Prof. Miguel * (easy with APSP information)
UVa 10172 - The Lonesome Cargo ... * (use both queue and stack)
UVa 10174 - Couple-Bachelor-Spinster ... (no Spinster number)
UVa 10176 - Ocean Deep; Make it ... * (discussed in this section)
UVa 10177 - (2/3/4)-D Sqr/Rects/... (2/3/4 nested loops, precalculate)
UVa 10179 - Irreducible Basic ... * (EulerPhi(N))
UVa 10182 - Bee Maja * (math, grid)
UVa 10183 - How many Fibs? (get the number of Fibonaccis when generating them; BigInteger)
UVa 10187 - From Dusk Till Dawn (special cases: start = destination: 0 litre; starting or destination city not found or destination city not reachable from starting city: no route; the rest: Dijkstra’s)
UVa 10188 - Automated Judge Script (simulation)
UVa 10189 - Minesweeper * (simulate Minesweeper, similar to UVa 10279)
UVa 10190 - Divide, But Not Quite ... (simulate the process)
UVa 10191 - Longest Nap (you may want to apply this to your own schedule)
UVa 10192 - Vacation * (Longest Common Subsequence)
UVa 10194 - Football a.k.a. Soccer (multi-fields sorting, use sort)
UVa 10196 - Check The Check (ad hoc chess game, tedious)
UVa 10197 - Learning Portuguese (must follow the description very closely)
UVa 10199 - Tourist Guide (finding articulation points)
UVa 10201 - Adventures in Moving ... (s: pos, fuel left)
UVa 10203 - Snow Clearing * (the underlying graph is Euler graph)
UVa 10205 - Stack ’em Up (card game)
UVa 10212 - The Last Non-zero Digit * (there is a modulo arithmetic solution: multiply numbers from N down to N − M + 1; repeatedly use /10 to discard the trailing zero(es), and then use %1 Billion to only memorize the last few (maximum 9) non zero digits)
UVa 10215 - The Largest/Smallest Box (two trivial cases for smallest; derive the formula for largest which involves quadratic equation)
UVa 10218 - Let’s Dance (probability and a bit of binomial coefficients)
UVa 10219 - Find the Ways * (count the length of n C k ; BigInteger)
UVa 10220 - I Love Big Numbers (use Java BigInteger; precalculate)
UVa 10222 - Decode the Mad Man (simple decoding mechanism)
UVa 10223 - How Many Nodes? (Precalculate the answers as there are only 19 Catalan Numbers < 2 32 − 1)
UVa 10226 - Hardwood Species * (use hashing for a better performance)
UVa 10227 - Forests (merge two disjoint sets if they are consistent)
UVa 10233 - Dermuba Triangle * (the number of items in row forms arithmetic progression series; use hypot)
UVa 10238 - Throw the Dice (similar to UVa 10759; use Java BigInteger)
UVa 10243 - Fire! Fire!! Fire!!! DP on Tree (Min Vertex Cover)             Section    4.7.1    
UVa 10249 - The Grand Dinner
UVa 10252 - Common Permutation * (count freq of each alphabet)
UVa 10257 - Dick and Jane (we can brute force the integer ages of spot, puff, and yertle; need some mathematical insights)
UVa 10258 - Contest Scoreboard * (multi-fields sorting, use sort)
UVa 10259 - Hippity Hopscotch (longest paths on implicit DAG; DP)
UVa 10260 - Soundex (Direct Addressing Table for soundex code mapping)
UVa 10261 - Ferry Loading (s: current car, left, right)
UVa 10264 - The Most Potent Corner * (heavy bitmask manipulation)
UVa 10267 - Graphical Editor (simulation)
UVa 10268 - 498’ * (polynomial derivation; Horner’s rule)
UVa 10276 - Hanoi Tower Troubles Again (insert a number one by one)
UVa 10278 - Fire Station (Dijkstra’s from fire stations to all intersections; need pruning to pass the time limit)
UVa 10279 - Mine Sweeper (a 2D array helps, similar to UVa 10189)
UVa 10282 - Babelfish (a pure dictionary problem; use map)
UVa 10284 - Chessboard in FEN * (FEN = Forsyth-Edwards Notation is a standard notation for describing board positions in a chess game)
UVa 10285 - Longest Run ... * (longest paths on implicit DAG; however, the graph is small enough for recursive backtracking solution)
UVa 10293 - Word Length and Frequency (straightforward)
UVa 10295 - Hay Points (use map to deal with Hay Points dictionary)
UVa 10298 - Power Strings * (find s in s + s, similar to UVa 455)
UVa 10299 - Relatives (EulerPhi(N))
UVa 10300 - Ecological Premium (ignore the number of animals)
UVa 10302 - Summation of Polynomials (use long double)
UVa 10303 - How Many Trees (generate Cat(n) as shown in this section, use Java BigInteger)
UVa 10305 - Ordering Tasks * (run toposort algorithm in this section)
UVa 10306 - e-Coins * (variant: each coin has two components)
UVa 10308 - Roads in the North (diameter of tree, discussed in this section)
UVa 10311 - Goldbach and Euler (case analysis, brute force, see UVa 543)
UVa 10312 - Expression Bracketing * (the number of binary bracketing can be counted by Cat(n); the total number of bracketing can be computed using Super-Catalan numbers)
UVa 10313 - Pay the Price (modified coin change + DP 1D range sum)
UVa 10315 - Poker Hands (tedious problem)
UVa 10323 - Factorial. You Must ... (overflow: n>13/-odd n; underflow: n<8/-even n; PS: actually, factorial of negative number is not defined)
UVa 10324 - Zeros and Ones (simplify using 1D array: change counter)
UVa 10326 - The Polynomial Equation (given roots of the polynomial, reconstruct the polynomial; formatting)
UVa 10328 - Coin Toss (DP, 1-D state, Java BigInteger)
UVa 10330 - Power Transmission (max flow with vertex capacities)
UVa 10333 - The Tower of ASCII (a real time waster problem)
UVa 10334 - Ray Through Glasses * (combinatorics, Java BigInteger)
UVa 10336 - Rank the Languages (count and rank CCs with similar color)
UVa 10337 - Flight Planner * (DP; shortest paths on DAG)
UVa 10338 - Mischievous Children * (use long long to store up to 20!)
UVa 10339 - Watching Watches (find the formula)
UVa 10340 - All in All
UVa 10341 - Solve It             Divide & Conquer (Bisection Method)       Section    3.3      
UVa 10341 - Solve It * (bisection method discussed in this section; for alternative solutions, see http://www.algorithmist.com/index.php/UVa 10341)
UVa 10344 - 23 Out of 5 (rearrange the 5 operands and the 3 operators)
UVa 10346 - Peter’s Smoke * (interesting simulation problem)
UVa 10349 - Antenna Placement * (Max Independent Set: V - MCBM)
UVa 10350 - Liftless Eme * (shortest paths; implicit DAG; DP) Also see: Longest Increasing Subsequence (see Section 3.5.3)
UVa 10354 - Avoiding Your Boss (find boss’s shortest paths, remove edges involved in boss’s shortest paths, re-run shortest paths from home to market)
UVa 10356 - Rough Roads (we can attach one extra information to each vertex: whether we come to that vertex using cycle or not; then, run Dijkstra’s to solve SSSP on this modified graph)
UVa 10359 - Tiling (derive the formula, use Java BigInteger)
UVa 10360 - Rat Attack           Complete Search or DP                     Section    3.2     
UVa 10360 - Rat Attack (also solvable using 1024 2 DP max sum)
UVa 10361 - Automatic Poetry (read, tokenize, process as requested)
UVa 10363 - Tic Tac Toe (check validity of Tic Tac Toe game, tricky)
UVa 10365 - Blocks (use 3 nested loops with pruning)
UVa 10368 - Euclid’s Game (minimax, backtracking, discussed in this section)
UVa 10369 - Arctic Networks * (minimum spanning ‘forest’)
UVa 10370 - Above Average (compute average, see how many are above it)
UVa 10371 - Time Zones (follow the problem description)
UVa 10374 - Election (use map for frequency counting)
UVa 10375 - Choose and Divide (the main task is to avoid overflow)
UVa 10377 - Maze Traversal (traversal on implicit graph)
UVa 10382 - Watering Grass (discussed in this section, interval covering)
UVa 10389 - Subway (use basic geometry skill to build the weighted graph, then run Dijkstra’s)
UVa 10391 - Compound Words (more like data structure problem)
UVa 10392 - Factoring Large Numbers (enumerate the prime factors of input)
UVa 10393 - The One-Handed Typist * (follow problem description)
UVa 10394 - Twin Primes * (sieve; check if p and p + 2 are both primes; if yes, they are twin primes; precalculate the result)
UVa 10397 - Connect the Campus (‘minimum’ spanning subgraph)
UVa 10400 - Game Show Math (backtracking with clever pruning is sufficient)
UVa 10401 - Injured Queen Problem * (counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows)
UVa 10404 - Bachet’s Game (2 players game, Dynamic Programming)
UVa 10405 - Longest Common ... (Longest Common Subsequence)
UVa 10407 - Simple Division * (subtract the set s with s[0], find gcd)
UVa 10408 - Farey Sequences * (first, generate (i, j) pairs such that gcd(i, j) = 1, then sort)
UVa 10409 - Die Game (just simulate the die movement)
UVa 10415 - Eb Alto Saxophone Player (about musical instruments)
UVa 10420 - List of Conquests (word frequency counting, use map)
UVa 10422 - Knights in FEN (solvable with BFS)
UVa 10424 - Love Calculator (just do as asked)
UVa 10440 - Ferry Loading II
UVa 10443 - Rock, Scissors, Paper * (2D arrays manipulation)
UVa 10446 - The Marriage Interview (edit the given recursive function a bit, add memoization)
UVa 10449 - Traffic * (find the minimum weight path, which may be negative; be careful: ∞ + negative weight is lower than ∞!)
UVa 10450 - World Cup Noise (combinatorics, the pattern ≈ Fibonacci)
UVa 10452 - Marcus, help (at each pos, Indy can go forth/left/right; try all)
UVa 10453 - Make Palindrome (s: (L, R); t: (L+1, R-1) if S[L] == S[R]; or one plus min of(L + 1, R) or (L, R - 1); also print the required solution)
UVa 10459 - The Tree Root * (identify the diameter of this tree)
UVa 10460 - Find the Permuted String (similar nature with UVa 10063)
UVa 10462 - Is There A Second ... (second best spanning tree)
UVa 10465 - Homer Simpson (one dimensional DP table)
UVa 10469 - To Carry or not to Carry (super simple if you use xor)
UVa 10474 - Where is the Marble? (simple: use sort and then lower bound)
UVa 10475 - Help the Leaders (generate and prune; try all)
UVa 10480 - Sabotage (straightforward min cut problem)
UVa 10483 - The Sum Equals ... (2 nested loops for a, b, derive c from a, b; there are 354 answers for range [0.01 .. 255.99]; similar with UVa 11236)
UVa 10484 - Divisibility of Factors (prime factors of factorial, D can be -ve)
UVa 10487 - Closest Sums * (sort and then do O(n 2 ) pairings)
UVa 10489 - Boxes of Chocolates (keep working values small with modulo)
UVa 10490 - Mr. Azad and his Son (Ad Hoc; precalculate the answers)
UVa 10491 - Cows and Cars * (discussed in this section)
UVa 10493 - Cats, with or without Hats (tree, derive the formula)
UVa 10496 - Collecting Beepers * (discussed in this section with sample source code; actually, since n ≤ 11, this problem is still solvable with recursive backtracking and sufficient pruning)
UVa 10497 - Sweet Child Make Trouble (the pattern ≈ Fibonacci)
UVa 10499 - The Land of Justice (simple formula exists)
UVa 10500 - Robot maps (simulate, output formatting)
UVa 10502 - Counting Rectangles (6 nested loops, rectangle, not too hard)
UVa 10503 - The dominoes solitaire * (max 13 spaces only)
UVa 10505 - Montesco vs Capuleto (bipartite graph, take max(left, right))
UVa 10506 - Ouroboros (any valid solution is AC; generate all possible next digit (up to base 10/digit [0..9]); check if it is still a valid Ouroboros sequence)
UVa 10507 - Waking up brain * (disjoint sets simplifies this problem)
UVa 10508 - Word Morphing (number of words = number of letters + 1)
UVa 10509 - R U Kidding Mr. ... (there are only three different cases)
UVa 10511 - Councilling (matching, max flow, print the assignment)
UVa 10515 - Power et al (concentrate on the last digit)
UVa 10520 - Determine it (just write the given formula as a top-down DP with memoization)
UVa 10525 - New to Bangladesh? (use two adjacency matrices: time and length; use modified Floyd Warshall’s)
UVa 10527 - Persistent Numbers (similar to UVa 993)
UVa 10528 - Major Scales (music knowledge is in the problem description)
UVa 10530 - Guessing Game (use a 1D flag array)
UVa 10532 - Combination, Once Again (modified binomial coefficient)
UVa 10534 - Wavio Sequence (must use O(n log k) LIS twice)
UVa 10541 - Stripe * (a good combinatorics problem; compute how many white cells are there via N white = N - sum of all K integers; imagine we have one more white cell at the very front, we can now determine the answer by placing black stripes after K out of N white + 1 whites, or N white+1 C K (use Java BigInteger); however, if K > N white + 1 then the answer is 0)
UVa 10543 - Traveling Politician (s: pos, given speech)
UVa 10550 - Combination Lock (simple, do as asked)
UVa 10554 - Calories from Fat (are you concerned with your weights?)
UVa 10557 - XYZZY * (check ‘positive’ cycle, check connectedness!)
UVa 10567 - Helping Fill Bates * (store increasing indices of each char of ‘S’ in 52 vectors; for each query, binary search for the position of the char in the correct vector)
UVa 10576 - Y2K Accounting Bug * (generate all, prune, take max)
UVa 10578 - The Game of 31 (backtracking; try all; see who wins the game)
UVa 10579 - Fibonacci Numbers (very easy with Java BigInteger)
UVa 10582 - ASCII Labyrinth (simplify complex input first; then backtrack)
UVa 10583 - Ubiquitous Religions (count disjoint sets after all unions)
UVa 10586 - Polynomial Remains * (division; manipulate coefficients)
UVa 10591 - Happy Number (this sequence is ‘eventually periodic’)
UVa 10596 - Morning Walk * (Euler Graph property check)
UVa 10600 - ACM Contest and ... * (second best spanning tree)
UVa 10602 - Editor Nottobad
UVa 10603 - Fill (state: (a, b, c), source: (0, 0, c), 6 possible transitions)
UVa 10608 - Friends (find the set with the largest element)
UVa 10610 - Gopher and Hawks (solvable with BFS)
UVa 10611 - Playboy Chimp (binary search)
UVa 10616 - Divisible Group Sum * (input can be -ve, use long long)
UVa 10617 - Again Palindrome (manipulate indices, not the actual string)
UVa 10620 - A Flea on a Chessboard (just simulate the jumps)
UVa 10622 - Perfect P-th Power (get GCD of all prime powers, special case if x is -ve)
UVa 10624 - Super Number (backtracking with divisibility check)
UVa 10625 - GNU = GNU’sNotUnix (frequency addition n times)
UVa 10633 - Rare Easy Problem (this problem can be modeled as Linear Diophantine Equation; let C = N − M (the given input), N = 10a + b (N is at least two digits, with b as the last digit), and M = a; this problem is now about finding the solution of the Linear Diophantine Equation: 9a + b = C)
UVa 10635 - Prince and Princess * (find LCS of two permutations)
UVa 10642 - Can You Solve It? (the reverse of UVa 264)
UVa 10643 - Facing Problems With ... (Cat(n) is part of a bigger problem)
UVa 10646 - What is the Card? * (shuffle cards with some rule and then get certain card)
UVa 10650 - Determinate Prime (sieve; find 3 uni-distance consecutive primes)
UVa 10653 - Bombs; NO they ... * (efficient BFS implementation)
UVa 10656 - Maximum Sum (II) *
UVa 10659 - Fitting Text into Slides (typical presentation programs do this)
UVa 10660 - Citizen attention ... * (7 nested loops, Manhattan distance)
UVa 10662 - The Wedding (3 nested loops)
UVa 10664 - Luggage (Subset Sum)
UVa 10666 - The Eurocup is here (analyze the binary representation of X)
UVa 10667 - Largest Block (standard problem)
UVa 10670 - Work Reduction
UVa 10672 - Marbles on a tree
UVa 10673 - Play with Floor and Ceil * (uses Extended Euclid)
UVa 10677 - Base Equality (try all from r2 to r1)
UVa 10679 - I Love Strings (the test data weak; just checking if T is a prefix of S is AC when it should not)
UVa 10680 - LCM * (use prime factors of [1..N] to get LCM(1,2,. . . ,N))
UVa 10681 - Teobaldo’s Trip (s: pos, day left)
UVa 10683 - The decadary watch (simple clock system conversion)
UVa 10684 - The Jackpot * (standard problem; easily solvable with the given sample source code)
UVa 10685 - Nature (find the set with the largest element)
UVa 10686 - SQF Problem (use map to manage the data)
UVa 10687 - Monitoring the Amazon (build graph, geometry, reachability)
UVa 10688 - The Poor Giant (note that the sample in the problem description is a bit wrong, it should be: 1+(1+3)+(1+3)+(1+3) = 1+4+4+4 = 13, beating 14; otherwise a simple DP)
UVa 10689 - Yet Another Number ... * (easy if you know Pisano (a.k.a Fibonacci) period)
UVa 10693 - Traffic Volume (derive the short Physics formula)
UVa 10696 - f91 (very simple formula simplification)
UVa 10698 - Football Sort (multi-fields sorting, use sort)
UVa 10699 - Count the Factors * (numDiffPF(N) for a range of N )
UVa 10700 - Camel Trading
UVa 10701 - Pre, in and post (reconstructing tree from pre + inorder)
UVa 10702 - Traveling Salesman (s: pos, T left)
UVa 10703 - Free spots (use 2D boolean array of size 500 × 500)
UVa 10706 - Number Sequence (binary search + some mathematical insights)
UVa 10707 - 2D - Nim (check graph isomorphism; a tedious problem; involving connected components)
UVa 10710 - Chinese Shuffle (the formula is a bit hard to derive; involving modPow; see Section 5.3 or Section 9.21)
UVa 10714 - Ants
UVa 10717 - Mint                 Decomposition: Complete Search + Math     Section    8.4
UVa 10718 - Bit Mask *
UVa 10719 - Quotient Polynomial (polynomial division and remainder)
UVa 10721 - Bar Codes * (s: n, k; t: try all from 1 to m)
UVa 10724 - Road Construction (adding one edge only changes ‘a few things’)
UVa 10730 - Antiarithmetic? (2 nested loops with pruning can pass possibly pass the weaker test cases; note that this brute force solution is too slow for the larger test data generated in the solution of UVa 11129)
UVa 10731 - Test (SCC + printing solution)
UVa 10733 - The Colored Cubes (Burnside’s lemma)
UVa 10738 - Riemann vs. Mertens * (numDiffPF(N) for a range of N )
UVa 10739 - String to Palindrome (variation of edit distance)
UVa 10742 - New Rule in Euphomia (use sieve; binary search)
UVa 10751 - Chessboard * (trival for N = 1 and N = 2; derive the formula first for N > 2; hint: use diagonal as much as possible)
UVa 10755 - Garbage Heap * (combination of max 2D range sum in two of the three dimensions—see below—and max 1D range sum using Kadane’s algorithm on the third dimension)
UVa 10759 - Dice Throwing * (discussed in this section)
UVa 10761 - Broken Keyboard (tricky with output formatting; note that ‘END’ is part of input!)
UVa 10763 - Foreign Exchange
UVa 10765 - Doves and Bombs * (finding articulation points)
UVa 10773 - Back to Intermediate ... * (several tricky cases)
UVa 10777 - God, Save me (expected value)
UVa 10779 - Collectors Problem (max flow modeling is not straightforward; the main idea is to build a flow graph such that each augmenting path corresponds to a series of exchange of duplicate stickers, starting with Bob giving away one of his duplicates, and ending with him receiving a new sticker; repeat until this is no longer possible)
UVa 10780 - Again Prime? No time. (similar but different problem with UVa 10139)
UVa 10783 - Odd Sum (input range is very small, just brute force it)
UVa 10784 - Diagonal * (the number of diagonals in n-gon = n∗(n−3)/2, use it to derive the solution)
UVa 10785 - The Mad Numerologist
UVa 10789 - Prime Frequency (check if a letter’s frequency is prime)
UVa 10790 - How Many Points of ... (uses arithmetic progression formula)
UVa 10791 - Minimum Sum LCM (analyze the prime factors of N )
UVa 10793 - The Orc Attack (Floyd Warshall’s simplifies this problem)
UVa 10800 - Not That Kind of Graph * (tedious problem)
UVa 10801 - Lift Hopping * (model the graph carefully!)
UVa 10803 - Thunder Mountain (graph is small)
UVa 10805 - Cockroach Escape ... * (involving diameter)
UVa 10812 - Beat the Spread * (be careful with boundary cases!)
UVa 10813 - Traditional BINGO * (follow the problem description)
UVa 10815 - Andy’s First Dictionary (use set and string)
UVa 10819 - Trouble of 13-Dots * (0-1 knapsack with ‘credit card’ twist!)
UVa 10820 - Send A Table (a[i] = a[i - 1] + 2 * EulerPhi(i))
UVa 10827 - Maximum Sum on ... * (copy n × n matrix into n × 2n matrix; then this problem becomes a standard problem again)
UVa 10842 - Traffic Flow (find min weighted edge in ‘max’ spanning tree)
UVa 10849 - Move the bishop (chess)
UVa 10851 - 2D Hieroglyphs ... * (ignore border; treat ’\/’ as 1/0; read from bottom)
UVa 10852 - Less Prime (sieve; p = 1, find the first prime number ≥ n 2 + 1)
UVa 10854 - Number of Paths * (recursive parsing plus counting)
UVa 10855 - Rotated squares * (string array, 90 o clockwise rotation)
UVa 10858 - Unique Factorization (use stack to help solving this problem) Also see: implicit stacks in recursive function calls and Postfix conversion/evaluation in Section 9.27.
UVa 10862 - Connect the Cable Wires (the pattern ends up ≈ Fibonacci)
UVa 10874 - Segments (s: row, left/right; t: go left/right)
UVa 10875 - Big Math (simple but tedious problem)
UVa 10878 - Decode the Tape * (treat space/‘o’ as 0/1, then it is binary to decimal conversion)
UVa 10879 - Code Refactoring (just use brute force)
UVa 10880 - Colin and Ryan (use sort)
UVa 10882 - Koerner’s Pub (inclusion-exclusion principle)
UVa 10892 - LCM Cardinality * (number of divisor pairs of N : (m, n) such that gcd(m, n) = 1)
UVa 10894 - Save Hridoy (how fast can you can solve this problem?)
UVa 10895 - Matrix Transpose * (transpose adjacency list)
UVa 10896 - Known Plaintext Attack (try all possible keys; use tokenizer)
UVa 10901 - Ferry Loading III * (simulation with queue)
UVa 10903 - Rock-Paper-Scissors ... (count win+losses, output win average)
UVa 10905 - Children’s Game (modified comparison function, use sort)
UVa 10906 - Strange Integration * (BNF parsing, iterative solution)
UVa 10908 - Largest Square (4 nested loops, square, not too hard)
UVa 10910 - Mark’s Distribution (two dimensional DP table)
UVa 10911 - Forming Quiz Teams   DP with bitmasks (Non Classical)          Section    8.3.1
UVa 10912 - Simple Minded Hashing (s: len, last, sum; t: try next char)
UVa 10913 - Walking ... * (s: r, c, neg left, stat; t: down/(left/right))
UVa 10916 - Factstone Benchmark * (use logarithm, power)
UVa 10918 - Tri Tiling (there are two related recurrences here)
UVa 10919 - Prerequisites? (process the requirements as the input is read)
UVa 10920 - Spiral Tap * (simulate the process)
UVa 10921 - Find the Telephone (simple conversion problem)
UVa 10922 - 2 the 9s (test divisibility by 9)
UVa 10926 - How Many Dependencies? (counting paths in DAG; DP)
UVa 10928 - My Dear Neighbours (counting out degrees)
UVa 10929 - You can say 11 (test divisibility by 11)
UVa 10930 - A-Sequence (ad-hoc, follow the rules given in description)
UVa 10931 - Parity * (convert decimal to binary, count number of ‘1’s)
UVa 10935 - Throwing cards away I (simulation with queue)
UVa 10940 - Throwing Cards Away II * (find pattern with brute force)
UVa 10943 - How do you add? * (discussed in this section with sample source code; s: n, k; t: try all the possible splitting points; alternative solution is to use the closed form mathematical formula: C(n + k − 1, k − 1) which also needs DP, see Section 5.4)
UVa 10945 - Mother Bear * (palindrome)
UVa 10946 - You want what filled? (find CCs and rank them by their size)
UVa 10947 - Bear with me, again.. (graph is small)
UVa 10948 - The Primary Problem (Goldbach’s conjecture, see UVa 543)
UVa 10950 - Bad Code (sort the input; run backtracking; the output should be sorted; only display the first 100 sorted output)
UVa 10954 - Add All * (use priority queue, greedy)
UVa 10958 - How Many Solutions? (2 * numDiv(n * m * p * p) - 1)
UVa 10959 - The Party, Part I (SSSP from source 0 to the rest)
UVa 10961 - Chasing After Don Giovanni (tedious simulation)
UVa 10963 - The Swallowing Ground (for two blocks to be mergable, the gaps between their columns must be the same)
UVa 10964 - Strange Planet (convert the coordinates to (x, y), then this problem is just about finding Euclidean distance between two coordinates)
UVa 10967 - The Great Escape (model the graph; shortest path)
UVa 10970 - Big Chocolate (direct formula exists, or use DP)
UVa 10973 - Triangle Counting (3 nested loops with pruning)
UVa 10976 - Fractions Again ? * (total solutions is asked upfront; there-fore do brute force twice)
UVa 10977 - Enchanted Forest (BFS with blocked states)
UVa 10978 - Let’s Play Magic (1D string array manipulation)
UVa 10980 - Lowest Price in Town (simple)
UVa 10982 - Troublemakers
UVa 10986 - Sending email * (straightforward Dijkstra’s application)
UVa 10990 - Another New Function * (modified sieve to compute a range of Euler Phi values; use DP to compute depth Phi values; then finally use Max 1D Range Sum DP to output the answer)
UVa 10994 - Simple Addition (formula simplification)
UVa 11000 - Bee (combinatorics, the pattern is similar to Fibonacci)
UVa 11001 - Necklace (brute force math, maximize function)
UVa 11003 - Boxes (try all max weight from 0 to max(weight[i]+capacity[i]), ∀i ∈ [0..n-1]; if a max weight is known, how many boxes can be stacked?)
UVa 11005 - Cheapest Base (try all possible bases from 2 to 36)
UVa 11015 - 05-32 Rendezvous (graph is small)
UVa 11021 - Tribbles (probability)
UVa 11022 - String Factoring * (s: the min weight of substring [i..j])
UVa 11026 - A Grouping Problem (DP, similar idea with binomial theorem in Section 5.4)
UVa 11028 - Sum of Product (this is ‘dartboard sequence’)
UVa 11029 - Leading and Trailing (combination of logarithmic trick to get the first three digits and ‘big mod’ trick to get the last three digits)
UVa 11034 - Ferry Loading IV * (simulation with queue)
UVa 11036 - Eventually periodic ... (cycle-finding, evaluate Reverse Polish f with a stack—also see Section 9.27)
UVa 11039 - Building Designing (use sort then count different signs)
UVa 11040 - Add bricks in the wall (non trivial 2D array manipulation)
UVa 11042 - Complex, difficult and ... (case analysis; only 4 possible outputs)
UVa 11044 - Searching for Nessy (one liner code/formula exists)
UVa 11045 - My T-Shirt Suits Me (assignment problem; but actually the input constraint is actually small enough for recursive backtracking)
UVa 11047 - The Scrooge Co Problem (print path; special case: if origin = destination, print twice)
UVa 11048 - Automatic Correction ... * (flexible string comparison with respect to a dictionary)
UVa 11049 - Basic Wall Maze (some restricted moves, print the path)
UVa 11053 - Flavius Josephus ... * (cycle-finding, the answer is N − λ)
UVa 11054 - Wine Trading in Gergovia
UVa 11055 - Homogeneous Square (not classic, observation needed to avoid brute-force solution)
UVa 11056 - Formula 1 * (sorting, case-insensitive string comparison)
UVa 11057 - Exact Sum * (sort, for price p[i], check if price (M - p[i]) exists with binary search)
UVa 11059 - Maximum Product (3 nested loops, input is small)
UVa 11060 - Beverages * (must use Kahn’s algorithm—the ‘modified BFS’ topological sort)
UVa 11062 - Andy’s Second Dictionary (similar to UVa 10815, with twists)
UVa 11063 - B2 Sequences (see if a number is repeated, be careful with -ve)
UVa 11064 - Number Theory (N - EulerPhi(N) - numDiv(N))
UVa 11067 - Little Red Riding Hood (similar to UVa 825)
UVa 11069 - A Graph Problem * (use Dynamic Programming)
UVa 11070 - The Good Old Times (recursive grammar evaluation)
UVa 11074 - Draw Grid (output formatting)
UVa 11078 - Open Credit System (one linear scan)
UVa 11080 - Place the Guards * (bipartite graph check, some tricky cases)
UVa 11085 - Back to the 8-Queens * (see UVa 750, pre-calculation)
UVa 11086 - Composite Prime (find numbers N with numPF(N) == 2)
UVa 11089 - Fi-binary Number (the list of Fi-binary Numbers follow the Zeckendorf’s theorem)
UVa 11090 - Going in Cycle (minimum mean weight cycle problem; solvable with backtracking with important pruning when current running mean is greater than the best found mean weight cycle cost)
UVa 11093 - Just Finish it up (linear scan, circular array, a bit challenging)
UVa 11094 - Continents * (tricky flood fill as it involves scrolling)
UVa 11100 - The Trip, 2007 *
UVa 11101 - Mall Mania * (multi-sources BFS from m1, get minimum at border of m2)
UVa 11103 - WFF’N Proof
UVa 11107 - Life Forms * (Longest Common Substring of > 1/2 of the strings)
UVa 11108 - Tautology (5 nested loops, try all 2 5 = 32 values with pruning)
UVa 11110 - Equidivisions (flood fill + satisfy the constraints given)
UVa 11115 - Uncle Jack (N D , use Java BigInteger)
UVa 11121 - Base -2 (search for the term ‘negabinary’)
UVa 11130 - Billiard bounces * (use billiard table reflection technique: mirror the billiard table to the right (and/or top) so that we will only deal with one straight line instead of bouncing lines)
UVa 11131 - Close Relatives (read tree; produce two postorder traversals)
UVa 11136 - Hoax or what * (use multiset)
UVa 11137 - Ingenuous Cubrency (use long long)
UVa 11138 - Nuts and Bolts * (pure MCBM problem, if you are new with MCBM, it is good to start from this problem)
UVa 11140 - Little Ali’s Little Brother (ad hoc)
UVa 11148 - Moliu Fractions (extract integers, simple/mixed fractions from a line; a bit of gcd—see Section 5.5.2)
UVa 11150 - Cola (similar to UVa 10346, be careful with boundary cases!)
UVa 11151 - Longest Palindrome * (discussed in this section)
UVa 11157 - Dynamic Frog *
UVa 11159 - Factors and Multiples * (MIS, but ans is the MCBM)
UVa 11161 - Help My Brother (II) (Fibonacci + median)
UVa 11167 - Monkeys in the Emei ... * (max flow modeling; there are lots of edges in the flow graph; therefore, it is better to compress the capacity-1 edges whenever possible; use O(V 2 E) Dinic’s max flow algorithm so that the high number of edges does not penalize the performance of your solution)
UVa 11172 - Relational Operators * (ad hoc, very easy, one liner)
UVa 11173 - Grey Codes (D & C pattern or one liner bit manipulation)
UVa 11176 - Winning Streak * (DP, s: (n left, max streak) where n left is the number of remaining games and max streak stores the longest consecutive wins; t: lose this game, or win the next W = [1..n left] games and lose the (W+1)-th game; special case if W = n left)
UVa 11181 - Probability (bar) Given (iterative brute force, try all possibilities)
UVa 11192 - Group Reverse (character array)
UVa 11201 - The Problem with the ... (backtracking involving strings)
UVa 11202 - The least possible effort (consider symmetry and flip)
UVa 11203 - Can you decide it ... * (problem description is convoluted, but this problem is actually easy)
UVa 11204 - Musical Instruments (only first choice matters)
UVa 11205 - The Broken Pedometer (try all 2 15 bitmask)
UVa 11219 - How old are you? (be careful with boundary cases!)
UVa 11220 - Decoding the message (follow instruction in the problem)
UVa 11221 - Magic Square Palindrome * (we deal with a matrix)
UVa 11222 - Only I did it (use several 1D arrays to simplify this problem)
UVa 11223 - O: dah, dah, dah (tedious morse code conversion)
UVa 11225 - Tarot scores (another card game)
UVa 11226 - Reaching the fix-point (sumPF(N); get length; DP)
UVa 11228 - Transportation System * (split the output for short versus long edges)
UVa 11230 - Annoying painting tool
UVa 11231 - Black and White Painting * (there is O(1) formula)
UVa 11233 - Deli Deli (string comparison)
UVa 11234 - Expressions (converting post-order to level-order, binary tree)
UVa 11235 - Frequent Values * (range maximum query)
UVa 11236 - Grocery Store * (3 nested loops for a, b, c; derive d from a, b, c; check if you have 949 lines of output)
UVa 11239 - Open Source (use map and set to check previous strings)
UVa 11240 - Antimonotonicity
UVa 11241 - Humidex (the hardest case is computing Dew point given temperature and Humidex; derive it with Algebra)
UVa 11242 - Tour de France * (plus sorting)
UVa 11244 - Counting Stars (count number of CCs)
UVa 11246 - K-Multiple Free Set (derive the formula)
UVa 11247 - Income Tax Hazard (brute force around the answer to be safe)
UVa 11254 - Consecutive Integers * (use sum of arithmetic progression: n = 2 r × (2 × a + r − 1) or a = (2 × n + r − r^2 )/(2 × r); as n is given, brute force all values of r from sqrt(2n) down to 1, stop at the first valid a)
UVa 11258 - String Partition * (discussed in this section)
UVa 11264 - Coin Collector * (coin change variant)
UVa 11269 - Setting Problems
UVa 11270 - Tiling Dominoes (sequence A004003 in OEIS)
UVa 11278 - One-Handed Typist * (map QWERTY keys to DVORAK)
UVa 11280 - Flying to Fredericton (modified Bellman Ford’s)
UVa 11283 - Playing Boggle * (2D grid, backtracking, do not count twice)
UVa 11284 - Shopping Trip * (requires shortest paths pre-processing; TSP variant where we can go home early; we just need to tweak the DP TSP recurrence a bit: at each state, we have one more option: go home early)
UVa 11286 - Conformity * (use map to keep track of the frequencies)
UVa 11291 - Smeech * (recursive descent parser)
UVa 11292 - Dragon of Loowater   Greedy (Non Classical)                    Section    3.4        
UVa 11292 - Dragon of Loowater *
UVa 11296 - Counting Solutions to an ... (simple formula exists)
UVa 11297 - Census (Quad Tree with updates or use 2D segment tree)
UVa 11298 - Dissecting a Hexagon (simple maths; derive the pattern first)
UVa 11307 - Alternative Arborescence (Min Chromatic Sum, max 6 colors)
UVa 11308 - Bankrupt Baker (use map and set to help manage the data)
UVa 11309 - Counting Chaos (palindrome check)
UVa 11310 - Delivery Debacle * (requires DP: let dp[i] be the number of ways the cakes can be packed for a box 2 × i. Note that it is possible to use two ‘L shaped’ cakes to form a 2 × 3 shape)
UVa 11311 - Exclusively Edible * (game theory, reducible to Nim game; we can view the game that Handel and Gretel are playing as Nim game, where there are 4 heaps - cakes left/below/right/above the topping; take the Nim sum of these 4 values and if they are equal to 0, Handel loses)
UVa 11313 - Gourmet Games (similar to UVa 10346)
UVa 11321 - Sort Sort and Sort (be careful with negative mod!)
UVa 11327 - Enumerating Rational ... (pre-calculate EulerPhi(N))
UVa 11332 - Summing Digits (simple recursions)
UVa 11335 - Discrete Pursuit
UVa 11338 - Minefield (it seems that the test data is weaker than what the problem description says (n ≤ 10000); we use O(n 2 ) loop to build the weighted graph and runs Dijkstra’s without getting TLE)
UVa 11340 - Newspaper * (DAT; see Hashing in Section 2.3)
UVa 11341 - Term Strategy (s: id, h learned, h left; t: learn module ‘id’ by 1 hour or skip)
UVa 11342 - Three-square (pre-calculate squared values from 0 2 to 224 2 , use 3 nested loops to generate the answers; use map to avoid duplicates)
UVa 11344 - The Huge One * (read M as string, use divisibility theory of [1..12])
UVa 11346 - Probability (a bit of geometry)
UVa 11347 - Multifactorials (prime-power factorization; numDiv(N))
UVa 11348 - Exhibition (use map and set to check uniqueness)
UVa 11349 - Symmetric Matrix (use long long to avoid issues)
UVa 11350 - Stern-Brocot Tree (simple tree data structure question)
UVa 11352 - Crazy King (filter the graph first, then it becomes SSSP)
UVa 11353 - A Different kind of Sorting (numPF(N); modified sorting)
UVa 11356 - Dates (very easy if you use Java GregorianCalendar)
UVa 11357 - Ensuring Truth * (the problem description looks scary—a SAT (satisfiability) problem; the presence of BNF grammar makes one think of recursive descent parser; however, only one clause needs to be satisfied to get TRUE; a clause can be satisfied if for all variables in the clause, its inverse is not in the clause too; now, we have a much simpler problem)
UVa 11360 - Have Fun with Matrices (do as asked)
UVa 11362 - Phone List (string sort, matching)
UVa 11364 - Parking (linear scan to get l & r, answer = 2 ∗ (r − l))
UVa 11367 - Full Tank? (discussed in this section)
UVa 11368 - Nested Dolls (sort in one dimension, LIS in the other)
UVa 11369 - Shopaholic
UVa 11371 - Number Theory for ... * (the solving strategy is given)
UVa 11377 - Airport Setup (model the graph carefully: A city to other city with no airport has edge weight 1. A city to other city with airport has edge weight 0. Do Dijkstra’s from source. If the start and end city are the same and has no airport, the answer should be 0.)
UVa 11380 - Down Went The Titanic * (discussed in this section)
UVa 11384 - Help is needed for Dexter (finding the smallest power of two greater than n, can be solved easily using ceil(eps + log 2 (n)))
UVa 11385 - Da Vinci Code * (string manipulation + Fibonacci)
UVa 11387 - The 3-Regular Graph (impossible for odd n or when n = 2; if n is a multiple of 4, consider complete graph K 4 ; if n = 6 + k × 4, consider one 3-Regular component of 6 vertices and the rest are K 4 as in previous case)
UVa 11388 - GCD LCM (understand the relationship of GCD with LCM)
UVa 11389 - The Bus Driver Problem * (load balancing)
UVa 11393 - Tri-Isomorphism (draw several small K n , derive the pattern)
UVa 11395 - Sigma Function (key hint: a square number multiplied by powers of two, i.e. 2 k × i 2 for k ≥ 0, i ≥ 1 has odd sum of divisors)
UVa 11396 - Claw Decomposition * (it is just a bipartite graph check)
UVa 11398 - The Base-1 Number System (just follow the new rules)
UVa 11401 - Triangle Counting * (spot the pattern, coding is easy)
UVa 11402 - Ahoy, Pirates * (segment tree with lazy updates)
UVa 11407 - Squares (can be memoized)
UVa 11412 - Dig the Holes (next permutation, find one possibility from 6!)
UVa 11413 - Fill the ... * (binary search the answer + simulation)
UVa 11417 - GCD (brute force, input is small)
UVa 11418 - Clever Naming Patterns (two layers of matching, it may be easier to use max flow solution)
UVa 11419 - SAM I AM (MVC, König theorem)
UVa 11420 - Chest of Drawers (s: prev, id, numlck; lock/unlock this chest)
UVa 11450 - Wedding Shopping     DP (Non Classical)                        Section    3.5      
UVa 11450 - Wedding Shopping (discussed in details in this section with sample source code)
UVa 11452 - Dancing the Cheeky ... * (string period, small input, BF)
UVa 11456 - Trainsorting * (max(LIS(i) + LDS(i) - 1), ∀i ∈ [0 . . . n-1])
UVa 11459 - Snakes and Ladders * (simulate it, similar to UVa 647)
UVa 11461 - Square Numbers (answer is sqrt(b) − sqrt(a_ − 1)
UVa 11463 - Commandos * (solution is easy with APSP information)
UVa 11466 - Largest Prime Divisor * (use efficient sieve implementation to get the largest prime factors)
UVa 11470 - Square Sums (you can do ‘flood fill’ layer by layer; however,there is other way to solve this problem, e.g. by finding the patterns)
UVa 11475 - Extend to Palindromes * (‘border’ of KMP)
UVa 11480 - Jimmy’s Balls (try all r, but simpler formula exists)
UVa 11482 - Building a Triangular ... (tedious...)
UVa 11483 - Code Creator (straightforward, use ‘escape character’)
UVa 11487 - Gathering Food * (s: row, col, cur food, len; t: 4 dirs)
UVa 11489 - Integer Game * (game theory, reducible to simple math)
UVa 11492 - Babel * (graph modeling; each word is a vertex; connect two vertices with an edge if they share common language and have different 1st char; connect a source vertex to all words that belong to start language; connect all words that belong to finish language to sink vertex; we can transfer vertex weight to edge weight; then SSSP from source vertex to sink vertex)
UVa 11494 - Queen (ad hoc, chess)
UVa 11496 - Musical Loop (store data in 1D array, count the peaks)
UVa 11498 - Division of Nlogonia * (just use if-else statements)
UVa 11500 - Vampires (Gambler’s Ruin Problem)
UVa 11503 - Virtual Friends * (maintain set attribute (size) in rep item)
UVa 11504 - Dominos * (interesting problem: count |SCCs| without incoming edge from a vertex outside that SCC)
UVa 11506 - Angry Programmer     Graph (Min Cut/Max Flow)                  Section    4.6
UVa 11506 - Angry Programmer * (min cut with vertex capacities)
UVa 11507 - Bender B. Rodriguez ... * (simulation, if-else)
UVa 11512 - GATTACA              String (Suffix Array, LCP, LRS)           Section    6.6
UVa 11512 - GATTACA * (Longest Repeated Substring)
UVa 11517 - Exact Change * (a variation to the coin change problem)
UVa 11518 - Dominos 2 (unlike UVa 11504, we treat SCCs as simple CCs)
UVa 11520 - Fill the Square
UVa 11526 - H(n) * (brute force up to sqrt(n), find the pattern, avoid TLE)
UVa 11530 - SMS Typing (handphone users encounter this problem everyday)
UVa 11532 - Simple Adjacency ...
UVa 11538 - Chess Queen * (count along rows, columns, and diagonals)
UVa 11541 - Decoding (read char by char and simulate)
UVa 11545 - Avoiding ... (s: cPos, cTime, cWTime; t: move forward/rest)
UVa 11547 - Automatic Answer (a one liner O(1) solution exists)
UVa 11548 - Blackboard Bonanza (4 nested loops, string, pruning)
UVa 11549 - Calculator Conundrum (repeat squaring with limited digits until it cycles; that is, the Floyd’s cycle-finding algorithm is only used to detect the cycle, we do not use the value of μ or λ; instead, we keep track the largest iterated function value found before any cycle is encountered)
UVa 11550 - Demanding Dilemma (graph representation, incidence matrix)
UVa 11552 - Fewest Flops (dp(i, c) = minimum number of chunks after considering the first i segments ending with character c)
UVa 11553 - Grid Game * (solve by trying all n! permutations; you can also use DP + bitmask, see Section 8.3.1, but it is overkill)
UVa 11554 - Hapless Hedonism (similar to UVa 11401)
UVa 11556 - Best Compression Ever (related to power of two, use long long)
UVa 11559 - Event Planning * (one linear pass)
UVa 11561 - Getting Gold (flood fill with extra blocking constraint)
UVa 11565 - Simple Equations * (3 nested loops with pruning)
UVa 11566 - Let’s Yum Cha * (English reading problem, actually just a knapsack variant: double each dim sum and add one parameter to check if we have bought too many dishes)
UVa 11567 - Moliu Number Generator
UVa 11572 - Unique Snowflakes * (use map to record the occurrence index of a certain snowflake size; use this to determine the answer in O(n log n))
UVa 11576 - Scrolling Sign * (modified string matching; complete search)
UVa 11577 - Letter Frequency (straightforward problem)
UVa 11581 - Grid Successors * (simulate the process)
UVa 11586 - Train Tracks (TLE if brute force, find the pattern)
UVa 11588 - Image Coding (sort simplifies the problem)
UVa 11597 - Spanning Subtree * (uses knowledge of graph theory, the answer is very trivial)
UVa 11608 - No Problem (use three arrays: created; required; available)
UVa 11609 - Teams (N × 2 N −1 , use Java BigInteger for the modPow part)
UVa 11614 - Etruscan Warriors Never ... (find roots of a quadratic equation)
UVa 11615 - Family Tree (counting size of subtrees)
UVa 11621 - Small Factors (generate numbers with factor 2 and/or 3, sort, upper bound)
UVa 11624 - Fire (multi-sources BFS)
UVa 11628 - Another lottery (p[i] = ticket[i] / total; use gcd to simplify fraction)
UVa 11629 - Ballot evaluation (use map)
UVa 11631 - Dark Roads * (weight of (all graph edges - all MST edges))
UVa 11634 - Generate random ... * (use DAT of size 10K, extract digits; the programming trick to square 4 digits ‘a’ and get the resulting middle 4 digits is a = (a * a / 100) % 10000)
UVa 11635 - Hotel Booking        Graph (Decomposition: Dijkstra’s + BFS)   Section    8.4
UVa 11636 - Hello World (uses logarithm)
UVa 11650 - Mirror Clock (some mathematics required)
UVa 11655 - Waterland (counting paths in DAG and one more similar task: counting the number of vertices involved in the paths)
UVa 11658 - Best Coalition (s: id, share; t: form/ignore coalition with id)
UVa 11660 - Look-and-Say sequences (simulate, break after j-th character)
UVa 11661 - Burger Time? (linear scan)
UVa 11666 - Logarithms (find the formula!)
UVa 11677 - Alarm Clock (similar idea with UVa 11650)
UVa 11678 - Card’s Exchange (actually just an array manipulation problem)
UVa 11679 - Sub-prime (check if after simulation all banks have ≥ 0 reserve)
UVa 11683 - Laser Sculpture (one linear pass is enough)
UVa 11686 - Pick up sticks (toposort + cycle check) Also see: DP on (implicit) DAG problems (see Section 4.7.1)
UVa 11687 - Digits (simulation; straightforward)
UVa 11689 - Soda Surpler (similar to UVa 10346)
UVa 11690 - Money Matters (check if total money from each member is 0)
UVa 11692 - Rain Fall (use algebraic manipulation to derive a quadratic equation; solve it; special case when H < L)
UVa 11695 - Flight Planning * (cut the worst edge along the tree diameter, link two centers)
UVa 11697 - Playfair Cipher * (follow the description, a bit tedious)
UVa 11701 - Cantor (a kind of ternary search)
UVa 11703 - sqrt log sin (can be memoized)
UVa 11709 - Trust Groups (find number of SCC)
UVa 11710 - Expensive Subway (output ‘Impossible’ if the graph is still disconnected after running MST)
UVa 11713 - Abstract Names (modified string comparison)
UVa 11714 - Blind Sorting (use decision tree model to find min and second min; eventually the solution only involves logarithm)
UVa 11715 - Car (physics simulation)
UVa 11716 - Digital Fortress (simple cipher)
UVa 11717 - Energy Saving Micro... (tricky simulation)
UVa 11718 - Fantasy of a Summation * (convert loops to a closed form formula, use modPow to compute the results, see Section 5.3 and 9.21)
UVa 11723 - Numbering Road * (simple math)
UVa 11727 - Cost Cutting * (sort the 3 numbers and get the median)
UVa 11728 - Alternate Task * (sumDiv(N))
UVa 11729 - Commando War
UVa 11733 - Airports (maintain cost at every update)
UVa 11734 - Big Number of Teams ... (modified string comparison)
UVa 11742 - Social Constraints (discussed in this section)
UVa 11743 - Credit Check (Luhn’s algorithm to check credit card numbers; search the Internet to learn more)
UVa 11747 - Heavy Cycle Edges * (sum the edge weights of the chords)
UVa 11749 - Poor Trade Advisor (find largest CC with highest average PPA)
UVa 11752 - The Super Powers (try base: 2 to 4sqrt(2^64) , composite power, sort)
UVa 11760 - Brother Arif, ... (separate row+col checks; use two bitsets)
UVa 11764 - Jumping Mario (one linear scan to count high+low jumps)
UVa 11770 - Lighting Away (similar to UVa 11504)
UVa 11774 - Doom’s Day (find pattern involving gcd with small test cases)
UVa 11777 - Automate the Grades (sort simplifies the problem)
UVa 11780 - Miles 2 Km (the background problem is Fibonacci numbers)
UVa 11782 - Optimal Cut (s: id, rem K; t: take root/try left-right subtree)
UVa 11787 - Numeral Hieroglyphs (follow the description)
UVa 11790 - Murcia’s Skyline * (combination of LIS+LDS, weighted)
UVa 11792 - Krochanska is Here (be careful with the ‘important station’)
UVa 11799 - Horror Dash * (one linear scan to find the max value)
UVa 11804 - Argentina (5 nested loops)
UVa 11805 - Bafana Bafana (very simple O(1) formula exists)
UVa 11816 - HST (simple math, precision required)
UVa 11824 - A Minimum Land Price (sort simplifies the problem)
UVa 11827 - Maximum GCD * (GCD of many numbers, small input)
UVa 11831 - Sticker Collector ... * (implicit graph; input order is ‘NSEW’ !)
UVa 11833 - Route Change (stop Dijkstra’s at service route path plus some modification)
UVa 11835 - Formula 1 (do as asked)
UVa 11838 - Come and Go * (check if graph is strongly connected)
UVa 11839 - Optical Reader (illegal if mark 0 or > 1 alternatives)
UVa 11847 - Cut the Silver Bar * (O(1) math formula exists: log 2 (n))
UVa 11849 - CD * (use set to pass the time limit, better: use hashing!)
UVa 11850 - Alaska (for each integer location from 0 to 1322; can Brenda reach (anywhere within 200 miles of) any charging stations?)
UVa 11857 - Driving Range (find weight of the last edge added to MST)
UVa 11860 - Document Analyzer (use set and map, linear scan)
UVa 11875 - Brick Game * (get median of a sorted input)
UVa 11876 - N + NOD (N) ([lower|upper] bound on sorted sequence N)
UVa 11877 - The Coco-Cola Store (similar to UVa 10346)
UVa 11878 - Homework Checker * (mathematical expression parsing)
UVa 11881 - Internal Rate of Return (bisection method)
UVa 11888 - Abnormal 89’s (to check ‘alindrome’, find reverse of s in s + s)
UVa 11889 - Benefit * (LCM, involving prime factorization
UVa 11900 - Boiled Eggs
UVa 11902 - Dominator (disable vertex one by one, check if the reachability from vertex 0 changes)
UVa 11906 - Knight in a War Grid * (DFS/BFS for reachability, several tricky cases; be careful when M = 0 || N = 0 || M = N)
UVa 11917 - Do Your Own Homework (use map)
UVa 11926 - Multitasking * (use 1M bitset to check if a slot is free)
UVa 11933 - Splitting Numbers * (an exercise for bit manipulation)
UVa 11934 - Magic Formula (just do plain brute-force)
UVa 11935 - Through the Desert (binary search the answer + simulation)
UVa 11942 - Lumberjack Sequencing (check if input is sorted asc/descending)
UVa 11945 - Financial Management (a bit output formatting)
UVa 11946 - Code Number (ad hoc)
UVa 11947 - Cancer or Scorpio * (easier with Java GregorianCalendar)
UVa 11951 - Area * (use long long; max 2D range sum; prune the search space whenever possible)
UVa 11953 - Battleships * (interesting twist of flood fill problem)	
UVa 11955 - Binomial Theorem * (pure application; DP)
UVa 11956 - Brain**** (simulation; ignore ‘.’)
UVa 11957 - Checkers * (counting paths in DAG; DP)
UVa 11958 - Coming Home (be careful with ‘past midnight’)
UVa 11959 - Dice (try all possible dice positions, compare with the 2nd one) Also see Mathematical Simulation in Section 5.2
UVa 11961 - DNA (there are at most 4 10 possible DNA strings; moreover, the mutation power is at most K ≤ 5 so the search space is much smaller; sort the output and then remove duplicates)
UVa 11962 - DNA II (find formula; similar to UVa 941; base 4)
UVa 11965 - Extra Spaces (replace consecutive spaces with only one space)
UVa 11968 - In The Airport (average; fabs; if ties, choose the smaller one!) Also see some mathematical problems in Section 3.2.
UVa 11970 - Lucky Numbers (square numbers, divisibility check, bf)
UVa 11975 - Tele-loto (3 nested loops, simulate the game as asked)
UVa 11984 - A Change in Thermal Unit (F ◦ to C ◦ conversion and vice versa)
UVa 11986 - Save from Radiation (log 2 (N + 1); manual check for precision)
UVa 11988 - Broken Keyboard ... * (rare linked list problem)
UVa 11991 - Easy Problem from ... * (use the idea of an Adj List) Also see: More graph problems in Chapter 4
UVa 11995 - I Can Guess ... * (stack, queue, and priority queue) Also see the usage of priority queue for topological sorts (see Section 4.2.1), Kruskal’s 19 (see Section 4.3.2), Prim’s (see Section 4.3.3), Dijkstra’s (see Section 4.4.3), and the A* Search algorithms (see Section 8.2.5)
UVa 12004 - Bubble Sort * (try small n; get the pattern; use long long)
UVa 12005 - Find Solutions (numDiv(4N-3))
UVa 12015 - Google is Feeling Lucky (traverse the list twice)
UVa 12019 - Doom’s Day Algorithm (Gregorian Calendar; get DAY OF WEEK)
UVa 12022 - Ordering T-shirts (number of ways n competitors can rank in a competition, allowing for the possibility of ties, see http://oeis.org/A000670)
UVa 12024 - Hats (discussed in this section)
UVa 12027 - Very Big Perfect Square (sqrt trick)
UVa 12032 - The Monkey ... * (binary search the answer + simulation)
UVa 12036 - Stable Grid * (use pigeon hole principle)
UVa 12043 - Divisors (sumDiv(N) and numDiv(N); brute force)
UVa 12047 - Highest Paid Toll * (clever usage of Dijkstra’s; run Dijkstra’s from source and from destination; try all edge (u, v) if dist[source][u]+ weight(u, v)+ dist[v][destination] ≤ p; record the largest edge weight found)
UVa 12049 - Just Prune The List (multiset manipulation)
UVa 12060 - All Integer Average * (LA 3012, Dhaka04, output format)
UVa 12068 - Harmonic Mean (involving fraction, use LCM and GCD)
UVa 12083 - Guardian of Decency (LA 3415, NorthwesternEurope05, MIS)
UVa 12085 - Mobile Casanova * (LA 2189, Dhaka06, watch out for PE)
UVa 12086 - Potentiometers (LA 2191, Dhaka06; pure dynamic range sum query problem; solvable with Fenwick Tree or Segment Tree)
UVa 12100 - Printer Queue (simulation with queue)
UVa 12114 - Bachelor Arithmetic (simple probability)
UVa 12125 - March of the Penguins * (max flow modeling with vertex capacities; another interesting problem, similar level with UVa 11380)
UVa 12136 - Schedule of a Married Man (LA 4202, Dhaka08, check time)
UVa 12144 - Almost Shortest Path (Dijkstra’s; store multiple predecessors)
UVa 12148 - Electricity (easy with Gregorian Calendar; use method ‘add’ to add one day to previous date and see if it is the same as the current date)
UVa 12149 - Feynman (finding the pattern; square numbers)
UVa 12150 - Pole Position (simple manipulation)
UVa 12155 - ASCII Diamondi * (use proper index manipulation)
UVa 12157 - Tariff Plan (LA 4405, KualaLumpur08, compute and compare)
UVa 12160 - Unlock the Lock * (LA 4408, KualaLumpur08, Vertices = The numbers; Link two numbers with an edge if we can use button push to transform one into another; use BFS to get the answer)
UVa 12168 - Cat vs. Dog (LA 4288, NorthwesternEurope08, MIS)
UVa 12186 - Another Crisis (the input graph is a tree)
UVa 12187 - Brothers (simulate the process)
UVa 12190 - Electric Bill (binary search the answer + algebra)
UVa 12192 - Grapevine * (the input array has special sorted properties; use lower bound to speed up the search)
UVa 12195 - Jingle Composing (count the number of correct measures)
UVa 12207 - This is Your Queue (use both queue and deque) Also see: queues in BFS (see Section 4.2.2)
UVa 12210 - A Match Making Problem *
UVa 12239 - Bingo (try all 90 2 pairs, see if all numbers in [0..N] are there)
UVa 12243 - Flowers Flourish ... (simple string tokenizer problem)
UVa 12247 - Jollo * (interesting card game; simple, but requires good logic to get all test cases correct)
UVa 12249 - Overlapping Scenes (LA 4994, KualaLumpur10, try all permutations, a bit of string matching)
UVa 12250 - Language Detection (LA 4995, KualaLumpur10, if-else check)
UVa 12279 - Emoogle Balance (simple linear scan)
UVa 12289 - One-Two-Three (just use if-else statements)
UVa 12290 - Counting Game (no ‘-1’ in the answer)
UVa 12291 - Polyomino Composer (do as asked, a bit tedious)
UVa 12293 - Box Game (analyze the game tree of smaller instances to get the mathematical insight to solve this problem)
UVa 12319 - Edgetown’s Traffic Jams (Floyd Warshall’s 2x and compare)
UVa 12321 - Gas Station (interval covering)
UVa 12342 - Tax Calculator (tax computation can be tricky indeed)
UVa 12346 - Water Gate Management (LA 5723, Phuket11, try all 2 n combinations, pick the best one)
UVa 12347 - Binary Search Tree (given pre-order traversal of a BST, use BST property to get the BST, output the post-order traversal that BST)
UVa 12348 - Fun Coloring (LA 5725, Phuket11, try all 2 n combinations)
UVa 12356 - Army Buddies * (similar to deletion in doubly linked lists,but we can still use a 1D array for the underlying data structure)
UVa 12364 - In Braille (2D array check, check all possible digits [0..9])
UVa 12372 - Packing for Holiday (just check if all L, W, H ≤ 20)
UVa 12376 - As Long as I Learn, I Live (simulated greedy traversal on DAG)
UVa 12398 - NumPuzz I (simulate backwards, do not forget to mod 10)
UVa 12403 - Save Setu (straightforward)
UVa 12405 - Scarecrow * (simpler interval covering problem)
UVa 12406 - Help Dexter (try all 2 p possible bitmasks, change ‘0’s to ‘2’s)
UVa 12414 - Calculating Yuan Fen (brute force problem involving string)
UVa 12416 - Excessive Space Remover (the answer is log 2 of the max consecutive spaces in a line)
UVa 12439 - February 29 (inclusion-exclusion; lots of corner cases; be careful)
UVa 12442 - Forwarding Emails * (modified DFS, special graph)
UVa 12455 - Bars * (discussed in this section)
UVa 12457 - Tennis contest (simple expected value problem; use DP)
UVa 12461 - Airplane (brute force small n to see that the answer is very easy)
UVa 12463 - Little Nephew (double socks & shoes to simplify the problem)
UVa 12464 - Professor Lazy, Ph.D. (although n can be very huge, the pattern is 	actually cyclic; find the length of the cycle l and modulo n with l)
UVa 12467 - Secret word (similar idea with UVa 11475, if you can solve that problem, you should be able to solve this problem)
UVa 12468 - Zapping (easy; there are only 4 possibilities)
UVa 12469 - Stones (game playing, Dynamic Programming, pruning)
UVa 12478 - Hardest Problem ... (try one of the eight names)
UVa 12482 - Short Story Competition
UVa 12485 - Perfect Choir
UVa 12488 - Start Grid (2 nested loops; simulate overtaking process)
UVa 12498 - Ant’s Shopping Mall (3 nested loops)
UVa 12502 - Three Families (must understand the ‘wording trick’ first)
UVa 12503 - Robot Instructions (easy simulation)
UVa 12504 - Updating a Dictionary (use map; string to string; a bit tedious)
UVa 12515 - Movie Police (3 nested loops)
UVa 12527 - Different Digits (try all, check repeated digits)
UVa 12531 - Hours and Minutes (angles between two clock hands)
UVa 12532 - Interval Product * (clever usage of Fenwick/Segment Tree) Also see: DS as part of the solution of harder problems in Chapter 8
UVa 12541 - Birthdates (LA6148, HatYai12, sort, pick youngest and oldest)
UVa 12543 - Longest Word (LA6150, HatYai12, iterative parser)
UVa 12554 - A Special ... Song (simulation)
UVa 12555 - Baby Me (one of the first question asked when a new baby is born; requires a bit of input processing)
UVa 12577 - Hajj-e-Akbar (straightforward)
UVa 12582 - Wedding of Sultan (given graph DFS traversal, count the degree of each vertex)
UVa 12583 - Memory Overflow (2 nested loops; be careful of overcounting)
UVa 12592 - Slogan Learning of Princess (use map; string to string) Also check frequency counting section in Section 6.3
UVa 12602 - Nice Licence Plates (simple base conversion)
UVa 12608 - Garbage Collection (simulation with several corner cases)
